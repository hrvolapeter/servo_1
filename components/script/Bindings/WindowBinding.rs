/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#![allow(non_camel_case_types,non_upper_case_globals,unused_imports,unused_variables,unused_assignments,unused_mut)]
use dom;
use dom::bindings;
use dom::bindings::callback::CallSetup;
use dom::bindings::callback::CallbackContainer;
use dom::bindings::callback::CallbackFunction;
use dom::bindings::callback::CallbackInterface;
use dom::bindings::callback::CallbackObject;
use dom::bindings::callback::ExceptionHandling;
use dom::bindings::callback::wrap_call_this_object;
use dom::bindings::codegen::InterfaceObjectMap;
use dom::bindings::codegen::PrototypeList;
use dom::bindings::codegen::RegisterBindings;
use dom::bindings::codegen::UnionTypes;
use dom::bindings::constant::ConstantSpec;
use dom::bindings::constant::ConstantVal;
use dom::bindings::conversions::ConversionBehavior;
use dom::bindings::conversions::ConversionResult;
use dom::bindings::conversions::DOM_OBJECT_SLOT;
use dom::bindings::conversions::FromJSValConvertible;
use dom::bindings::conversions::IDLInterface;
use dom::bindings::conversions::StringificationBehavior;
use dom::bindings::conversions::ToJSValConvertible;
use dom::bindings::conversions::is_array_like;
use dom::bindings::conversions::jsid_to_string;
use dom::bindings::conversions::native_from_handlevalue;
use dom::bindings::conversions::native_from_object;
use dom::bindings::conversions::private_from_object;
use dom::bindings::conversions::root_from_handleobject;
use dom::bindings::conversions::root_from_handlevalue;
use dom::bindings::conversions::root_from_object;
use dom::bindings::error::Error;
use dom::bindings::error::Error::JSFailed;
use dom::bindings::error::ErrorResult;
use dom::bindings::error::Fallible;
use dom::bindings::error::throw_dom_exception;
use dom::bindings::guard::Condition;
use dom::bindings::guard::Guard;
use dom::bindings::htmlconstructor::html_constructor;
use dom::bindings::htmlconstructor::pop_current_element_queue;
use dom::bindings::htmlconstructor::push_new_element_queue;
use dom::bindings::inheritance::Castable;
use dom::bindings::interface::ConstructorClassHook;
use dom::bindings::interface::InterfaceConstructorBehavior;
use dom::bindings::interface::NonCallbackInterfaceObjectClass;
use dom::bindings::interface::create_callback_interface_object;
use dom::bindings::interface::create_global_object;
use dom::bindings::interface::create_interface_prototype_object;
use dom::bindings::interface::create_named_constructors;
use dom::bindings::interface::create_noncallback_interface_object;
use dom::bindings::interface::define_guarded_constants;
use dom::bindings::interface::define_guarded_methods;
use dom::bindings::interface::define_guarded_properties;
use dom::bindings::interface::is_exposed_in;
use dom::bindings::iterable::Iterable;
use dom::bindings::iterable::IteratorType;
use dom::bindings::mozmap::MozMap;
use dom::bindings::namespace::NamespaceObjectClass;
use dom::bindings::namespace::create_namespace_object;
use dom::bindings::num::Finite;
use dom::bindings::proxyhandler;
use dom::bindings::proxyhandler::ensure_expando_object;
use dom::bindings::proxyhandler::fill_property_descriptor;
use dom::bindings::proxyhandler::get_expando_object;
use dom::bindings::proxyhandler::get_property_descriptor;
use dom::bindings::reflector::DomObject;
use dom::bindings::reflector::MutDomObject;
use dom::bindings::root::Dom;
use dom::bindings::root::DomRoot;
use dom::bindings::root::OptionalHeapSetter;
use dom::bindings::root::RootedReference;
use dom::bindings::str::ByteString;
use dom::bindings::str::DOMString;
use dom::bindings::str::USVString;
use dom::bindings::trace::JSTraceable;
use dom::bindings::trace::RootedTraceable;
use dom::bindings::trace::RootedTraceableBox;
use dom::bindings::utils::AsVoidPtr;
use dom::bindings::utils::DOMClass;
use dom::bindings::utils::DOMJSClass;
use dom::bindings::utils::DOM_PROTO_UNFORGEABLE_HOLDER_SLOT;
use dom::bindings::utils::JSCLASS_DOM_GLOBAL;
use dom::bindings::utils::ProtoOrIfaceArray;
use dom::bindings::utils::enumerate_global;
use dom::bindings::utils::finalize_global;
use dom::bindings::utils::find_enum_value;
use dom::bindings::utils::generic_getter;
use dom::bindings::utils::generic_lenient_getter;
use dom::bindings::utils::generic_lenient_setter;
use dom::bindings::utils::generic_method;
use dom::bindings::utils::generic_setter;
use dom::bindings::utils::get_array_index_from_id;
use dom::bindings::utils::get_dictionary_property;
use dom::bindings::utils::get_property_on_prototype;
use dom::bindings::utils::get_proto_or_iface_array;
use dom::bindings::utils::has_property_on_prototype;
use dom::bindings::utils::is_platform_object;
use dom::bindings::utils::resolve_global;
use dom::bindings::utils::set_dictionary_property;
use dom::bindings::utils::trace_global;
use dom::bindings::weakref::DOM_WEAK_SLOT;
use dom::bindings::weakref::WeakBox;
use dom::bindings::weakref::WeakReferenceable;
use dom::globalscope::GlobalScope;
use dom::windowproxy::WindowProxy;
use js;
use js::JSCLASS_GLOBAL_SLOT_COUNT;
use js::JSCLASS_IS_DOMJSCLASS;
use js::JSCLASS_IS_GLOBAL;
use js::JSCLASS_RESERVED_SLOTS_MASK;
use js::JS_CALLEE;
use js::error::throw_internal_error;
use js::error::throw_type_error;
use js::glue::AppendToAutoIdVector;
use js::glue::CallJitGetterOp;
use js::glue::CallJitMethodOp;
use js::glue::CallJitSetterOp;
use js::glue::CreateProxyHandler;
use js::glue::GetProxyPrivate;
use js::glue::ProxyTraps;
use js::glue::RUST_JSID_IS_INT;
use js::glue::RUST_JSID_IS_STRING;
use js::glue::RUST_SYMBOL_TO_JSID;
use js::glue::UnwrapObject;
use js::glue::int_to_jsid;
use js::jsapi::AutoIdVector;
use js::jsapi::CallArgs;
use js::jsapi::CurrentGlobalOrNull;
use js::jsapi::FreeOp;
use js::jsapi::GetWellKnownSymbol;
use js::jsapi::Handle as RawHandle;
use js::jsapi::HandleId as RawHandleId;
use js::jsapi::HandleObject as RawHandleObject;
use js::jsapi::HandleValue as RawHandleValue;
use js::jsapi::HandleValueArray;
use js::jsapi::Heap;
use js::jsapi::INTERNED_STRING_TO_JSID;
use js::jsapi::IsCallable;
use js::jsapi::JSAutoCompartment;
use js::jsapi::JSCLASS_RESERVED_SLOTS_SHIFT;
use js::jsapi::JSClass;
use js::jsapi::JSContext;
use js::jsapi::JSFreeOp;
use js::jsapi::JSFunctionSpec;
use js::jsapi::JSITER_HIDDEN;
use js::jsapi::JSITER_OWNONLY;
use js::jsapi::JSITER_SYMBOLS;
use js::jsapi::JSJitGetterCallArgs;
use js::jsapi::JSJitInfo;
use js::jsapi::JSJitInfo_AliasSet;
use js::jsapi::JSJitInfo_ArgType;
use js::jsapi::JSJitInfo_OpType;
use js::jsapi::JSJitMethodCallArgs;
use js::jsapi::JSJitSetterCallArgs;
use js::jsapi::JSNative;
use js::jsapi::JSNativeWrapper;
use js::jsapi::JSObject;
use js::jsapi::JSPROP_ENUMERATE;
use js::jsapi::JSPROP_PERMANENT;
use js::jsapi::JSPROP_READONLY;
use js::jsapi::JSPROP_SHARED;
use js::jsapi::JSPropertySpec;
use js::jsapi::JSString;
use js::jsapi::JSTracer;
use js::jsapi::JSType;
use js::jsapi::JSTypedMethodJitInfo;
use js::jsapi::JSValueType;
use js::jsapi::JS_AtomizeAndPinString;
use js::jsapi::JS_ForwardGetPropertyTo;
use js::jsapi::JS_GetErrorPrototype;
use js::jsapi::JS_GetGlobalForObject;
use js::jsapi::JS_GetIteratorPrototype;
use js::jsapi::JS_GetPropertyById;
use js::jsapi::JS_GetPropertyDescriptorById;
use js::jsapi::JS_GetReservedSlot;
use js::jsapi::JS_HasProperty;
use js::jsapi::JS_HasPropertyById;
use js::jsapi::JS_NewObject;
use js::jsapi::JS_SetReservedSlot;
use js::jsapi::MutableHandle as RawMutableHandle;
use js::jsapi::MutableHandleObject as RawMutableHandleObject;
use js::jsapi::MutableHandleValue as RawMutableHandleValue;
use js::jsapi::ObjectOpResult;
use js::jsapi::PropertyDescriptor;
use js::jsapi::Rooted;
use js::jsapi::RootedId;
use js::jsapi::RootedObject;
use js::jsapi::RootedString;
use js::jsapi::SymbolCode;
use js::jsapi::jsid;
use js::jsval::JSVal;
use js::jsval::NullValue;
use js::jsval::ObjectOrNullValue;
use js::jsval::ObjectValue;
use js::jsval::PrivateValue;
use js::jsval::UndefinedValue;
use js::panic::maybe_resume_unwind;
use js::panic::wrap_panic;
use js::rust::CustomAutoRooterGuard;
use js::rust::GCMethods;
use js::rust::Handle;
use js::rust::HandleId;
use js::rust::HandleObject;
use js::rust::HandleValue;
use js::rust::MutableHandle;
use js::rust::MutableHandleObject;
use js::rust::MutableHandleValue;
use js::rust::define_methods;
use js::rust::define_properties;
use js::rust::get_object_class;
use js::rust::wrappers::Call;
use js::rust::wrappers::GetPropertyKeys;
use js::rust::wrappers::JS_CallFunctionValue;
use js::rust::wrappers::JS_CopyPropertiesFrom;
use js::rust::wrappers::JS_DefineProperty;
use js::rust::wrappers::JS_DefinePropertyById2;
use js::rust::wrappers::JS_GetFunctionPrototype;
use js::rust::wrappers::JS_GetObjectPrototype;
use js::rust::wrappers::JS_GetProperty;
use js::rust::wrappers::JS_InitializePropertiesFromCompatibleNativeObject;
use js::rust::wrappers::JS_NewObjectWithGivenProto;
use js::rust::wrappers::JS_NewObjectWithoutMetadata;
use js::rust::wrappers::JS_ObjectIsDate;
use js::rust::wrappers::JS_SetImmutablePrototype;
use js::rust::wrappers::JS_SetProperty;
use js::rust::wrappers::JS_SetPrototype;
use js::rust::wrappers::JS_SplicePrototype;
use js::rust::wrappers::JS_WrapObject;
use js::rust::wrappers::JS_WrapValue;
use js::rust::wrappers::NewProxyObject;
use js::typedarray;
use libc;
use malloc_size_of::MallocSizeOfOps;
use mem::malloc_size_of_including_raw_self;
use servo_config::prefs::PREFS;
use std::borrow::ToOwned;
use std::cmp;
use std::default::Default;
use std::ffi::CString;
use std::mem;
use std::num;
use std::os;
use std::os::raw::c_void;
use std::panic;
use std::ptr;
use std::ptr::NonNull;
use std::rc;
use std::rc::Rc;
use std::str;
use typeholder::TypeHolderTrait;

#[repr(usize)]
#[derive(Copy, Clone, Debug, JSTraceable, MallocSizeOf, PartialEq)]
pub enum ScrollBehavior {
    Auto,
    Instant,
    Smooth
}
pub mod ScrollBehaviorValues {
    use dom::bindings::conversions::ToJSValConvertible;
    use js::jsapi::JSContext;
    use js::rust::MutableHandleValue;
    use js::jsval::JSVal;

    pub const pairs: &'static [(&'static str, super::ScrollBehavior)] = &[
        ("auto", super::ScrollBehavior::Auto),
        ("instant", super::ScrollBehavior::Instant),
        ("smooth", super::ScrollBehavior::Smooth),
    ];

    impl super::ScrollBehavior {
        pub fn as_str(&self) -> &'static str {
            pairs[*self as usize].0
        }
    }

    impl Default for super::ScrollBehavior {
        fn default() -> super::ScrollBehavior {
            pairs[0].1
        }
    }

    impl ToJSValConvertible for super::ScrollBehavior {
        unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
            pairs[*self as usize].0.to_jsval(cx, rval);
        }
    }
        } // mod ScrollBehaviorValues

#[derive(JSTraceable)]
pub struct ScrollOptions {
    pub behavior: ScrollBehavior,
}
impl ScrollOptions {
    pub unsafe fn empty(cx: *mut JSContext) -> ScrollOptions {
        match ScrollOptions::new(cx, HandleValue::null()) {
            Ok(ConversionResult::Success(v)) => v,
            _ => unreachable!(),
        }
    }
    pub unsafe fn new(cx: *mut JSContext, val: HandleValue)
                      -> Result<ConversionResult<ScrollOptions>, ()> {
        let object = if val.get().is_null_or_undefined() {
            ptr::null_mut()
        } else if val.get().is_object() {
            val.get().to_object()
        } else {
            return Ok(ConversionResult::Failure("Value is not an object.".into()));
        };
        rooted!(in(cx) let object = object);
            let dictionary = ScrollOptions {
            behavior: {
                rooted!(in(cx) let mut rval = UndefinedValue());
                match try!(get_dictionary_property(cx, object.handle(), "behavior", rval.handle_mut())) {
                    true => {
                        match find_enum_value(cx, rval.handle(), ScrollBehaviorValues::pairs) {
                            Err(_) => { return Err(()); },
                            Ok((None, search)) => { throw_type_error(cx, &format!("'{}' is not a valid enum value for enumeration 'ScrollBehavior'.", search)); return Err(()); },
                            Ok((Some(&value), _)) => value,
                        }
                    },
                    false => {
                        ScrollBehavior::Auto
                    },
                }
            },
            };
        Ok(ConversionResult::Success(dictionary))
    }
}

impl FromJSValConvertible for ScrollOptions {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext, value: HandleValue, _option: ())
                         -> Result<ConversionResult<ScrollOptions>, ()> {
        ScrollOptions::new(cx, value)
    }
}

impl ToJSValConvertible for ScrollOptions {
    unsafe fn to_jsval(&self, cx: *mut JSContext, mut rval: MutableHandleValue) {
        rooted!(in(cx) let obj = JS_NewObject(cx, ptr::null()));
        let behavior = &self.behavior;
        rooted!(in(cx) let mut behavior_js = UndefinedValue());
        behavior.to_jsval(cx, behavior_js.handle_mut());
        set_dictionary_property(cx, obj.handle(), "behavior", behavior_js.handle()).unwrap();
        rval.set(ObjectOrNullValue(obj.get()))
    }
}


#[derive(JSTraceable)]
pub struct ScrollToOptions {
    pub parent: dom::bindings::codegen::Bindings::WindowBinding::ScrollOptions,
    pub left: Option<f64>,
    pub top: Option<f64>,
}
impl ScrollToOptions {
    pub unsafe fn empty(cx: *mut JSContext) -> ScrollToOptions {
        match ScrollToOptions::new(cx, HandleValue::null()) {
            Ok(ConversionResult::Success(v)) => v,
            _ => unreachable!(),
        }
    }
    pub unsafe fn new(cx: *mut JSContext, val: HandleValue)
                      -> Result<ConversionResult<ScrollToOptions>, ()> {
        let object = if val.get().is_null_or_undefined() {
            ptr::null_mut()
        } else if val.get().is_object() {
            val.get().to_object()
        } else {
            return Ok(ConversionResult::Failure("Value is not an object.".into()));
        };
        rooted!(in(cx) let object = object);
            let dictionary = ScrollToOptions {
            parent: {
                match try!(dom::bindings::codegen::Bindings::WindowBinding::ScrollOptions::new(cx, val)) {
                    ConversionResult::Success(v) => v,
                    ConversionResult::Failure(error) => {
                        throw_type_error(cx, &error);
                        return Err(());
                    }
                }
            },
            left: {
                rooted!(in(cx) let mut rval = UndefinedValue());
                match try!(get_dictionary_property(cx, object.handle(), "left", rval.handle_mut())) {
                    true => {
                        Some(match FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return Err(());
                            }
                            _ => { return Err(()); }
                        })
                    },
                    false => {
                        None
                    },
                }
            },
            top: {
                rooted!(in(cx) let mut rval = UndefinedValue());
                match try!(get_dictionary_property(cx, object.handle(), "top", rval.handle_mut())) {
                    true => {
                        Some(match FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return Err(());
                            }
                            _ => { return Err(()); }
                        })
                    },
                    false => {
                        None
                    },
                }
            },
            };
        Ok(ConversionResult::Success(dictionary))
    }
}

impl FromJSValConvertible for ScrollToOptions {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext, value: HandleValue, _option: ())
                         -> Result<ConversionResult<ScrollToOptions>, ()> {
        ScrollToOptions::new(cx, value)
    }
}

impl ToJSValConvertible for ScrollToOptions {
    unsafe fn to_jsval(&self, cx: *mut JSContext, mut rval: MutableHandleValue) {
        rooted!(in(cx) let obj = JS_NewObject(cx, ptr::null()));
        if let Some(ref left) = self.left {
            rooted!(in(cx) let mut left_js = UndefinedValue());
            left.to_jsval(cx, left_js.handle_mut());
            set_dictionary_property(cx, obj.handle(), "left", left_js.handle()).unwrap();
        }
        if let Some(ref top) = self.top {
            rooted!(in(cx) let mut top_js = UndefinedValue());
            top.to_jsval(cx, top_js.handle_mut());
            set_dictionary_property(cx, obj.handle(), "top", top_js.handle()).unwrap();
        }
        rval.set(ObjectOrNullValue(obj.get()))
    }
}


#[derive(JSTraceable, PartialEq)]
#[allow_unrooted_interior]
pub struct FrameRequestCallback<TH: TypeHolderTrait> {
    pub parent: CallbackFunction<TH>,
}

impl<TH: TypeHolderTrait> FrameRequestCallback<TH> {
    pub unsafe fn new(aCx: *mut JSContext, aCallback: *mut JSObject) -> Rc<FrameRequestCallback<TH>> {
        let mut ret = Rc::new(FrameRequestCallback {
            parent: CallbackFunction::new()
        });
        // Note: callback cannot be moved after calling init.
        match Rc::get_mut(&mut ret) {
            Some(ref mut callback) => callback.parent.init(aCx, aCallback),
            None => unreachable!(),
        };
        ret
    }

    pub fn Call_<T: DomObject, TH: TypeHolderTrait>(&self, thisObj: &T, time: Finite<f64>, aExceptionHandling: ExceptionHandling) -> Fallible<(), TH> {
        let s = CallSetup::new(self, aExceptionHandling);
        rooted!(in(s.get_context()) let mut thisObjJS = ptr::null_mut::<JSObject>());
        wrap_call_this_object(s.get_context(), thisObj, thisObjJS.handle_mut());
        if thisObjJS.is_null() {
            return Err(JSFailed);
        }
        unsafe { self.Call(s.get_context(), thisObjJS.handle(), time) }
    }

    pub fn Call__(&self, time: Finite<f64>, aExceptionHandling: ExceptionHandling) -> Fallible<(), TH> {
        let s = CallSetup::new(self, aExceptionHandling);
        rooted!(in(s.get_context()) let thisObjJS = ptr::null_mut::<JSObject>());
        unsafe { self.Call(s.get_context(), thisObjJS.handle(), time) }
    }

    unsafe fn Call(&self, cx: *mut JSContext, aThisObj: HandleObject, time: Finite<f64>) -> Fallible<(), TH> {
        rooted!(in(cx) let mut rval = UndefinedValue());
        rooted_vec!(let mut argv);
        argv.extend((0..1).map(|_| Heap::default()));

        let argc = 1;

        rooted!(in(cx) let mut argv_root = UndefinedValue());
        (time).to_jsval(cx, argv_root.handle_mut());
        {
        let arg = &mut argv[0];
        *arg = Heap::default();
        arg.set(argv_root.get());
        }

        rooted!(in(cx) let callable = ObjectValue(self.callback()));
        rooted!(in(cx) let rootedThis = aThisObj.get());
        let ok = JS_CallFunctionValue(
            cx, rootedThis.handle(), callable.handle(),
            &HandleValueArray {
                length_: argc as ::libc::size_t,
                elements_: argv.as_ptr() as *const JSVal
            }, rval.handle_mut());
        maybe_resume_unwind();
        if !ok {
            return Err(JSFailed);
        }

        Ok(())

    }
}
impl<TH: TypeHolderTrait> CallbackContainer<TH> for FrameRequestCallback<TH> {
    unsafe fn new(cx: *mut JSContext, callback: *mut JSObject) -> Rc<FrameRequestCallback<TH>> {
        FrameRequestCallback::new(cx, callback)
    }

    fn callback_holder(&self) -> &CallbackObject<TH> {
        self.parent.callback_holder()
    }
}

impl<TH: TypeHolderTrait> ToJSValConvertible for FrameRequestCallback<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        self.callback().to_jsval(cx, rval);
    }
}

pub use self::WindowBinding::{Wrap, WindowMethods, GetProtoObject, DefineDOMInterface};
pub mod WindowBinding {
#![allow(non_camel_case_types,non_upper_case_globals,unused_imports,unused_variables,unused_assignments,unused_mut)]
use dom;
use dom::bindings;
use dom::bindings::callback::CallSetup;
use dom::bindings::callback::CallbackContainer;
use dom::bindings::callback::CallbackFunction;
use dom::bindings::callback::CallbackInterface;
use dom::bindings::callback::CallbackObject;
use dom::bindings::callback::ExceptionHandling;
use dom::bindings::callback::wrap_call_this_object;
use dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull;
use dom::bindings::codegen::Bindings::EventHandlerBinding::OnBeforeUnloadEventHandlerNonNull;
use dom::bindings::codegen::Bindings::EventHandlerBinding::OnErrorEventHandlerNonNull;
use dom::bindings::codegen::Bindings::EventTargetBinding::EventTargetBinding;
use dom::bindings::codegen::Bindings::FunctionBinding::Function;
use dom::bindings::codegen::Bindings::NodeBinding::NodeBinding;
use dom::bindings::codegen::Bindings::RequestBinding::ReferrerPolicy;
use dom::bindings::codegen::Bindings::RequestBinding::ReferrerPolicyValues;
use dom::bindings::codegen::Bindings::RequestBinding::RequestCache;
use dom::bindings::codegen::Bindings::RequestBinding::RequestCacheValues;
use dom::bindings::codegen::Bindings::RequestBinding::RequestCredentials;
use dom::bindings::codegen::Bindings::RequestBinding::RequestCredentialsValues;
use dom::bindings::codegen::Bindings::RequestBinding::RequestInit;
use dom::bindings::codegen::Bindings::RequestBinding::RequestMode;
use dom::bindings::codegen::Bindings::RequestBinding::RequestModeValues;
use dom::bindings::codegen::Bindings::RequestBinding::RequestRedirect;
use dom::bindings::codegen::Bindings::RequestBinding::RequestRedirectValues;
use dom::bindings::codegen::Bindings::WindowBinding::FrameRequestCallback;
use dom::bindings::codegen::Bindings::WindowBinding::ScrollBehavior;
use dom::bindings::codegen::Bindings::WindowBinding::ScrollBehaviorValues;
use dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions;
use dom::bindings::codegen::InterfaceObjectMap;
use dom::bindings::codegen::PrototypeList;
use dom::bindings::codegen::RegisterBindings;
use dom::bindings::codegen::UnionTypes;
use dom::bindings::constant::ConstantSpec;
use dom::bindings::constant::ConstantVal;
use dom::bindings::conversions::ConversionBehavior;
use dom::bindings::conversions::ConversionResult;
use dom::bindings::conversions::DOM_OBJECT_SLOT;
use dom::bindings::conversions::FromJSValConvertible;
use dom::bindings::conversions::IDLInterface;
use dom::bindings::conversions::StringificationBehavior;
use dom::bindings::conversions::ToJSValConvertible;
use dom::bindings::conversions::is_array_like;
use dom::bindings::conversions::jsid_to_string;
use dom::bindings::conversions::native_from_handlevalue;
use dom::bindings::conversions::native_from_object;
use dom::bindings::conversions::private_from_object;
use dom::bindings::conversions::root_from_handleobject;
use dom::bindings::conversions::root_from_handlevalue;
use dom::bindings::conversions::root_from_object;
use dom::bindings::error::Error;
use dom::bindings::error::Error::JSFailed;
use dom::bindings::error::ErrorResult;
use dom::bindings::error::Fallible;
use dom::bindings::error::throw_dom_exception;
use dom::bindings::guard::Condition;
use dom::bindings::guard::Guard;
use dom::bindings::htmlconstructor::html_constructor;
use dom::bindings::htmlconstructor::pop_current_element_queue;
use dom::bindings::htmlconstructor::push_new_element_queue;
use dom::bindings::inheritance::Castable;
use dom::bindings::interface::ConstructorClassHook;
use dom::bindings::interface::InterfaceConstructorBehavior;
use dom::bindings::interface::NonCallbackInterfaceObjectClass;
use dom::bindings::interface::create_callback_interface_object;
use dom::bindings::interface::create_global_object;
use dom::bindings::interface::create_interface_prototype_object;
use dom::bindings::interface::create_named_constructors;
use dom::bindings::interface::create_noncallback_interface_object;
use dom::bindings::interface::define_guarded_constants;
use dom::bindings::interface::define_guarded_methods;
use dom::bindings::interface::define_guarded_properties;
use dom::bindings::interface::is_exposed_in;
use dom::bindings::iterable::Iterable;
use dom::bindings::iterable::IteratorType;
use dom::bindings::mozmap::MozMap;
use dom::bindings::namespace::NamespaceObjectClass;
use dom::bindings::namespace::create_namespace_object;
use dom::bindings::num::Finite;
use dom::bindings::proxyhandler;
use dom::bindings::proxyhandler::ensure_expando_object;
use dom::bindings::proxyhandler::fill_property_descriptor;
use dom::bindings::proxyhandler::get_expando_object;
use dom::bindings::proxyhandler::get_property_descriptor;
use dom::bindings::reflector::DomObject;
use dom::bindings::reflector::MutDomObject;
use dom::bindings::root::Dom;
use dom::bindings::root::DomRoot;
use dom::bindings::root::OptionalHeapSetter;
use dom::bindings::root::RootedReference;
use dom::bindings::str::ByteString;
use dom::bindings::str::DOMString;
use dom::bindings::str::USVString;
use dom::bindings::trace::JSTraceable;
use dom::bindings::trace::RootedTraceable;
use dom::bindings::trace::RootedTraceableBox;
use dom::bindings::utils::AsVoidPtr;
use dom::bindings::utils::DOMClass;
use dom::bindings::utils::DOMJSClass;
use dom::bindings::utils::DOM_PROTO_UNFORGEABLE_HOLDER_SLOT;
use dom::bindings::utils::JSCLASS_DOM_GLOBAL;
use dom::bindings::utils::ProtoOrIfaceArray;
use dom::bindings::utils::enumerate_global;
use dom::bindings::utils::finalize_global;
use dom::bindings::utils::find_enum_value;
use dom::bindings::utils::generic_getter;
use dom::bindings::utils::generic_lenient_getter;
use dom::bindings::utils::generic_lenient_setter;
use dom::bindings::utils::generic_method;
use dom::bindings::utils::generic_setter;
use dom::bindings::utils::get_array_index_from_id;
use dom::bindings::utils::get_dictionary_property;
use dom::bindings::utils::get_property_on_prototype;
use dom::bindings::utils::get_proto_or_iface_array;
use dom::bindings::utils::has_property_on_prototype;
use dom::bindings::utils::is_platform_object;
use dom::bindings::utils::resolve_global;
use dom::bindings::utils::set_dictionary_property;
use dom::bindings::utils::trace_global;
use dom::bindings::weakref::DOM_WEAK_SLOT;
use dom::bindings::weakref::WeakBox;
use dom::bindings::weakref::WeakReferenceable;
use dom::globalscope::GlobalScope;
use dom::promise::Promise;
use dom::types::CSSStyleDeclaration;
use dom::types::Crypto;
use dom::types::CustomElementRegistry;
use dom::types::Document;
use dom::types::Element;
use dom::types::EventTarget;
use dom::types::History;
use dom::types::Location;
use dom::types::MediaQueryList;
use dom::types::Navigator;
use dom::types::Node;
use dom::types::Performance;
use dom::types::Request;
use dom::types::Screen;
use dom::types::Storage;
use dom::types::TestRunner;
use dom::types::Window;
use dom::windowproxy::WindowProxy;
use js;
use js::JSCLASS_GLOBAL_SLOT_COUNT;
use js::JSCLASS_IS_DOMJSCLASS;
use js::JSCLASS_IS_GLOBAL;
use js::JSCLASS_RESERVED_SLOTS_MASK;
use js::JS_CALLEE;
use js::error::throw_internal_error;
use js::error::throw_type_error;
use js::glue::AppendToAutoIdVector;
use js::glue::CallJitGetterOp;
use js::glue::CallJitMethodOp;
use js::glue::CallJitSetterOp;
use js::glue::CreateProxyHandler;
use js::glue::GetProxyPrivate;
use js::glue::ProxyTraps;
use js::glue::RUST_JSID_IS_INT;
use js::glue::RUST_JSID_IS_STRING;
use js::glue::RUST_SYMBOL_TO_JSID;
use js::glue::UnwrapObject;
use js::glue::int_to_jsid;
use js::jsapi::AutoIdVector;
use js::jsapi::CallArgs;
use js::jsapi::CurrentGlobalOrNull;
use js::jsapi::FreeOp;
use js::jsapi::GetWellKnownSymbol;
use js::jsapi::Handle as RawHandle;
use js::jsapi::HandleId as RawHandleId;
use js::jsapi::HandleObject as RawHandleObject;
use js::jsapi::HandleValue as RawHandleValue;
use js::jsapi::HandleValueArray;
use js::jsapi::Heap;
use js::jsapi::INTERNED_STRING_TO_JSID;
use js::jsapi::IsCallable;
use js::jsapi::JSAutoCompartment;
use js::jsapi::JSCLASS_RESERVED_SLOTS_SHIFT;
use js::jsapi::JSClass;
use js::jsapi::JSContext;
use js::jsapi::JSFreeOp;
use js::jsapi::JSFunctionSpec;
use js::jsapi::JSITER_HIDDEN;
use js::jsapi::JSITER_OWNONLY;
use js::jsapi::JSITER_SYMBOLS;
use js::jsapi::JSJitGetterCallArgs;
use js::jsapi::JSJitInfo;
use js::jsapi::JSJitInfo_AliasSet;
use js::jsapi::JSJitInfo_ArgType;
use js::jsapi::JSJitInfo_OpType;
use js::jsapi::JSJitMethodCallArgs;
use js::jsapi::JSJitSetterCallArgs;
use js::jsapi::JSNative;
use js::jsapi::JSNativeWrapper;
use js::jsapi::JSObject;
use js::jsapi::JSPROP_ENUMERATE;
use js::jsapi::JSPROP_PERMANENT;
use js::jsapi::JSPROP_READONLY;
use js::jsapi::JSPROP_SHARED;
use js::jsapi::JSPropertySpec;
use js::jsapi::JSString;
use js::jsapi::JSTracer;
use js::jsapi::JSType;
use js::jsapi::JSTypedMethodJitInfo;
use js::jsapi::JSValueType;
use js::jsapi::JS_AtomizeAndPinString;
use js::jsapi::JS_ForwardGetPropertyTo;
use js::jsapi::JS_GetErrorPrototype;
use js::jsapi::JS_GetGlobalForObject;
use js::jsapi::JS_GetIteratorPrototype;
use js::jsapi::JS_GetPropertyById;
use js::jsapi::JS_GetPropertyDescriptorById;
use js::jsapi::JS_GetReservedSlot;
use js::jsapi::JS_HasProperty;
use js::jsapi::JS_HasPropertyById;
use js::jsapi::JS_NewObject;
use js::jsapi::JS_SetReservedSlot;
use js::jsapi::MutableHandle as RawMutableHandle;
use js::jsapi::MutableHandleObject as RawMutableHandleObject;
use js::jsapi::MutableHandleValue as RawMutableHandleValue;
use js::jsapi::ObjectOpResult;
use js::jsapi::PropertyDescriptor;
use js::jsapi::Rooted;
use js::jsapi::RootedId;
use js::jsapi::RootedObject;
use js::jsapi::RootedString;
use js::jsapi::SymbolCode;
use js::jsapi::jsid;
use js::jsval::JSVal;
use js::jsval::NullValue;
use js::jsval::ObjectOrNullValue;
use js::jsval::ObjectValue;
use js::jsval::PrivateValue;
use js::jsval::UndefinedValue;
use js::panic::maybe_resume_unwind;
use js::panic::wrap_panic;
use js::rust::CustomAutoRooterGuard;
use js::rust::GCMethods;
use js::rust::Handle;
use js::rust::HandleId;
use js::rust::HandleObject;
use js::rust::HandleValue;
use js::rust::MutableHandle;
use js::rust::MutableHandleObject;
use js::rust::MutableHandleValue;
use js::rust::define_methods;
use js::rust::define_properties;
use js::rust::get_object_class;
use js::rust::wrappers::Call;
use js::rust::wrappers::GetPropertyKeys;
use js::rust::wrappers::JS_CallFunctionValue;
use js::rust::wrappers::JS_CopyPropertiesFrom;
use js::rust::wrappers::JS_DefineProperty;
use js::rust::wrappers::JS_DefinePropertyById2;
use js::rust::wrappers::JS_GetFunctionPrototype;
use js::rust::wrappers::JS_GetObjectPrototype;
use js::rust::wrappers::JS_GetProperty;
use js::rust::wrappers::JS_InitializePropertiesFromCompatibleNativeObject;
use js::rust::wrappers::JS_NewObjectWithGivenProto;
use js::rust::wrappers::JS_NewObjectWithoutMetadata;
use js::rust::wrappers::JS_ObjectIsDate;
use js::rust::wrappers::JS_SetImmutablePrototype;
use js::rust::wrappers::JS_SetProperty;
use js::rust::wrappers::JS_SetPrototype;
use js::rust::wrappers::JS_SplicePrototype;
use js::rust::wrappers::JS_WrapObject;
use js::rust::wrappers::JS_WrapValue;
use js::rust::wrappers::NewProxyObject;
use js::typedarray;
use libc;
use malloc_size_of::MallocSizeOfOps;
use mem::malloc_size_of_including_raw_self;
use servo_config::prefs::PREFS;
use std::borrow::ToOwned;
use std::cmp;
use std::default::Default;
use std::ffi::CString;
use std::mem;
use std::num;
use std::os;
use std::os::raw::c_void;
use std::panic;
use std::ptr;
use std::ptr::NonNull;
use std::rc;
use std::rc::Rc;
use std::str;
use typeholder::TypeHolderTrait;

unsafe extern fn get_window<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<WindowProxy<TH>> = this.Window();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const window_getterinfo: JSJitInfo = JSJitInfo {
    call: get_window as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_self<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<WindowProxy<TH>> = this.Self_();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_self<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        JS_DefineProperty(cx, obj, b"self\0" as *const u8 as *const libc::c_char,
                          args.get(0), JSPROP_ENUMERATE, None, None)
    }), false);
}


const self_getterinfo: JSJitInfo = JSJitInfo {
    call: get_self as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const self_setterinfo: JSJitInfo = JSJitInfo {
    call: set_self as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_document<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Document<TH>> = this.Document();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const document_getterinfo: JSJitInfo = JSJitInfo {
    call: get_document as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_name<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DOMString = this.Name();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_name<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: () = this.SetName(arg0);

        return true;
    }), false);
}


const name_getterinfo: JSJitInfo = JSJitInfo {
    call: get_name as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_STRING as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const name_setterinfo: JSJitInfo = JSJitInfo {
    call: set_name as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_location<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Location<TH>> = this.Location();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const location_getterinfo: JSJitInfo = JSJitInfo {
    call: get_location as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_history<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<History<TH>> = this.History();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const history_getterinfo: JSJitInfo = JSJitInfo {
    call: get_history as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_customElements<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<CustomElementRegistry<TH>> = this.CustomElements();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const customElements_getterinfo: JSJitInfo = JSJitInfo {
    call: get_customElements as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_status<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DOMString = this.Status();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_status<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: () = this.SetStatus(arg0);

        return true;
    }), false);
}


const status_getterinfo: JSJitInfo = JSJitInfo {
    call: get_status as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_STRING as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const status_setterinfo: JSJitInfo = JSJitInfo {
    call: set_status as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn close<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let result: () = this.Close();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const close_methodinfo: JSJitInfo = JSJitInfo {
    call: close as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_closed<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: bool = this.Closed();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const closed_getterinfo: JSJitInfo = JSJitInfo {
    call: get_closed as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_BOOLEAN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_frames<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<WindowProxy<TH>> = this.Frames();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_frames<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        JS_DefineProperty(cx, obj, b"frames\0" as *const u8 as *const libc::c_char,
                          args.get(0), JSPROP_ENUMERATE, None, None)
    }), false);
}


const frames_getterinfo: JSJitInfo = JSJitInfo {
    call: get_frames as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const frames_setterinfo: JSJitInfo = JSJitInfo {
    call: set_frames as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_top<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<DomRoot<WindowProxy<TH>>> = this.GetTop();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const top_getterinfo: JSJitInfo = JSJitInfo {
    call: get_top as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_parent<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<DomRoot<WindowProxy<TH>>> = this.GetParent();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const parent_getterinfo: JSJitInfo = JSJitInfo {
    call: get_parent as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_frameElement<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<DomRoot<Element<TH>>> = this.GetFrameElement();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const frameElement_getterinfo: JSJitInfo = JSJitInfo {
    call: get_frameElement as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_navigator<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Navigator<TH>> = this.Navigator();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const navigator_getterinfo: JSJitInfo = JSJitInfo {
    call: get_navigator as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn alert<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        let argcount = cmp::min(argc, 1);
        match argcount {
            0 => {
                let result: () = this.Alert_();

                (result).to_jsval(cx, args.rval());
                return true;
            }
            1 => {
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let result: () = this.Alert(arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            _ => {
                throw_type_error(cx, "Not enough arguments to \"Window.alert\".");
                return false;
            }
        }
    }), false);
}


const alert_methodinfo: JSJitInfo = JSJitInfo {
    call: alert as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn requestAnimationFrame<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.requestAnimationFrame\".");
            return false;
        }
        let arg0: Rc<FrameRequestCallback> = if args.get(0).get().is_object() {
            if IsCallable(args.get(0).get().to_object()) {
                FrameRequestCallback::new(cx, args.get(0).get().to_object())
            } else {
                throw_type_error(cx, "Value is not callable.");
                return false;

            }
        } else {
            throw_type_error(cx, "Value is not an object.");
            return false;

        };
        let result: u32 = this.RequestAnimationFrame(arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const requestAnimationFrame_methodinfo: JSJitInfo = JSJitInfo {
    call: requestAnimationFrame as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_DOUBLE as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn cancelAnimationFrame<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.cancelAnimationFrame\".");
            return false;
        }
        let arg0: u32 = match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let result: () = this.CancelAnimationFrame(arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const cancelAnimationFrame_methodinfo: JSJitInfo = JSJitInfo {
    call: cancelAnimationFrame as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn postMessage<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 2 {
            throw_type_error(cx, "Not enough arguments to \"Window.postMessage\".");
            return false;
        }
        let arg0: HandleValue = args.get(0);
        let arg1: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(1), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: Result<(), Error> = this.PostMessage(cx, arg0, arg1);
        let result = match result {
            Ok(result) => result,
            Err(e) => {
                throw_dom_exception(cx, &this.global(), e);
                return false;
            },
        };

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const postMessage_methodinfo: JSJitInfo = JSJitInfo {
    call: postMessage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn captureEvents<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let result: () = this.CaptureEvents();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const captureEvents_methodinfo: JSJitInfo = JSJitInfo {
    call: captureEvents as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn releaseEvents<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let result: () = this.ReleaseEvents();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const releaseEvents_methodinfo: JSJitInfo = JSJitInfo {
    call: releaseEvents as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn getComputedStyle<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.getComputedStyle\".");
            return false;
        }
        let arg0: DomRoot<Element<TH>> = if args.get(0).get().is_object() {
            match root_from_handlevalue(args.get(0)) {
                Ok(val) => val,
                Err(()) => {
                    throw_type_error(cx, "value does not implement interface Element.");
                    return false;

                }
            }

        } else {
            throw_type_error(cx, "Value is not an object.");
            return false;

        };
        let arg1: Option<DOMString> = if args.get(1).is_undefined() {
            None
        } else {
            Some(match FromJSValConvertible::from_jsval(cx, args.get(1), StringificationBehavior::Default) {
                Ok(ConversionResult::Success(strval)) => strval,
                Ok(ConversionResult::Failure(error)) => {
                    throw_type_error(cx, &error);
                    return false;

                }
                _ => { return false;
             },
            })
        };
        let result: DomRoot<CSSStyleDeclaration<TH>> = this.GetComputedStyle(&arg0, arg1);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const getComputedStyle_methodinfo: JSJitInfo = JSJitInfo {
    call: getComputedStyle as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn matchMedia<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.matchMedia\".");
            return false;
        }
        let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: DomRoot<MediaQueryList<TH>> = this.MatchMedia(arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const matchMedia_methodinfo: JSJitInfo = JSJitInfo {
    call: matchMedia as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_screen<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Screen<TH>> = this.Screen();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const screen_getterinfo: JSJitInfo = JSJitInfo {
    call: get_screen as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasNone as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        true,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn moveTo<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 2 {
            throw_type_error(cx, "Not enough arguments to \"Window.moveTo\".");
            return false;
        }
        let arg0: i32 = match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let arg1: i32 = match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let result: () = this.MoveTo(arg0, arg1);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const moveTo_methodinfo: JSJitInfo = JSJitInfo {
    call: moveTo as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn moveBy<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 2 {
            throw_type_error(cx, "Not enough arguments to \"Window.moveBy\".");
            return false;
        }
        let arg0: i32 = match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let arg1: i32 = match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let result: () = this.MoveBy(arg0, arg1);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const moveBy_methodinfo: JSJitInfo = JSJitInfo {
    call: moveBy as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn resizeTo<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 2 {
            throw_type_error(cx, "Not enough arguments to \"Window.resizeTo\".");
            return false;
        }
        let arg0: i32 = match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let arg1: i32 = match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let result: () = this.ResizeTo(arg0, arg1);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const resizeTo_methodinfo: JSJitInfo = JSJitInfo {
    call: resizeTo as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn resizeBy<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 2 {
            throw_type_error(cx, "Not enough arguments to \"Window.resizeBy\".");
            return false;
        }
        let arg0: i32 = match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let arg1: i32 = match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         }
        };
        let result: () = this.ResizeBy(arg0, arg1);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const resizeBy_methodinfo: JSJitInfo = JSJitInfo {
    call: resizeBy as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_innerWidth<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.InnerWidth();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const innerWidth_getterinfo: JSJitInfo = JSJitInfo {
    call: get_innerWidth as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_innerHeight<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.InnerHeight();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const innerHeight_getterinfo: JSJitInfo = JSJitInfo {
    call: get_innerHeight as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_scrollX<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.ScrollX();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const scrollX_getterinfo: JSJitInfo = JSJitInfo {
    call: get_scrollX as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_pageXOffset<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.PageXOffset();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const pageXOffset_getterinfo: JSJitInfo = JSJitInfo {
    call: get_pageXOffset as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_scrollY<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.ScrollY();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const scrollY_getterinfo: JSJitInfo = JSJitInfo {
    call: get_scrollY as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_pageYOffset<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.PageYOffset();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const pageYOffset_getterinfo: JSJitInfo = JSJitInfo {
    call: get_pageYOffset as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn scroll<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        let argcount = cmp::min(argc, 2);
        match argcount {
            0 => {
                let arg0: dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions = if args.get(0).is_undefined() {
                    dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions::empty(cx)
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                        Ok(ConversionResult::Success(dictionary)) => dictionary,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     },
                    }
                };
                let result: () = this.Scroll(&arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            1 => {
                let arg0: dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions = if args.get(0).is_undefined() {
                    dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions::empty(cx)
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                        Ok(ConversionResult::Success(dictionary)) => dictionary,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     },
                    }
                };
                let result: () = this.Scroll(&arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            2 => {
                let arg0: f64 = match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                    Ok(ConversionResult::Success(v)) => v,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 }
                };
                let arg1: f64 = match FromJSValConvertible::from_jsval(cx, args.get(1), ()) {
                    Ok(ConversionResult::Success(v)) => v,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 }
                };
                let result: () = this.Scroll_(arg0, arg1);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            _ => {
                throw_type_error(cx, "Not enough arguments to \"Window.scroll\".");
                return false;
            }
        }
    }), false);
}


const scroll_methodinfo: JSJitInfo = JSJitInfo {
    call: scroll as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn scrollTo<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        let argcount = cmp::min(argc, 2);
        match argcount {
            0 => {
                let arg0: dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions = if args.get(0).is_undefined() {
                    dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions::empty(cx)
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                        Ok(ConversionResult::Success(dictionary)) => dictionary,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     },
                    }
                };
                let result: () = this.ScrollTo(&arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            1 => {
                let arg0: dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions = if args.get(0).is_undefined() {
                    dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions::empty(cx)
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                        Ok(ConversionResult::Success(dictionary)) => dictionary,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     },
                    }
                };
                let result: () = this.ScrollTo(&arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            2 => {
                let arg0: f64 = match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                    Ok(ConversionResult::Success(v)) => v,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 }
                };
                let arg1: f64 = match FromJSValConvertible::from_jsval(cx, args.get(1), ()) {
                    Ok(ConversionResult::Success(v)) => v,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 }
                };
                let result: () = this.ScrollTo_(arg0, arg1);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            _ => {
                throw_type_error(cx, "Not enough arguments to \"Window.scrollTo\".");
                return false;
            }
        }
    }), false);
}


const scrollTo_methodinfo: JSJitInfo = JSJitInfo {
    call: scrollTo as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn scrollBy<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        let argcount = cmp::min(argc, 2);
        match argcount {
            0 => {
                let arg0: dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions = if args.get(0).is_undefined() {
                    dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions::empty(cx)
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                        Ok(ConversionResult::Success(dictionary)) => dictionary,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     },
                    }
                };
                let result: () = this.ScrollBy(&arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            1 => {
                let arg0: dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions = if args.get(0).is_undefined() {
                    dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions::empty(cx)
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                        Ok(ConversionResult::Success(dictionary)) => dictionary,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     },
                    }
                };
                let result: () = this.ScrollBy(&arg0);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            2 => {
                let arg0: f64 = match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
                    Ok(ConversionResult::Success(v)) => v,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 }
                };
                let arg1: f64 = match FromJSValConvertible::from_jsval(cx, args.get(1), ()) {
                    Ok(ConversionResult::Success(v)) => v,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 }
                };
                let result: () = this.ScrollBy_(arg0, arg1);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            _ => {
                throw_type_error(cx, "Not enough arguments to \"Window.scrollBy\".");
                return false;
            }
        }
    }), false);
}


const scrollBy_methodinfo: JSJitInfo = JSJitInfo {
    call: scrollBy as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_screenX<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.ScreenX();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const screenX_getterinfo: JSJitInfo = JSJitInfo {
    call: get_screenX as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_screenY<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.ScreenY();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const screenY_getterinfo: JSJitInfo = JSJitInfo {
    call: get_screenY as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_outerWidth<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.OuterWidth();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const outerWidth_getterinfo: JSJitInfo = JSJitInfo {
    call: get_outerWidth as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_outerHeight<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: i32 = this.OuterHeight();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const outerHeight_getterinfo: JSJitInfo = JSJitInfo {
    call: get_outerHeight as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_devicePixelRatio<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Finite<f64> = this.DevicePixelRatio();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const devicePixelRatio_getterinfo: JSJitInfo = JSJitInfo {
    call: get_devicePixelRatio as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_DOUBLE as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn debug<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.debug\".");
            return false;
        }
        let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: () = this.Debug(arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const debug_methodinfo: JSJitInfo = JSJitInfo {
    call: debug as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn gc<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let result: () = this.Gc();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const gc_methodinfo: JSJitInfo = JSJitInfo {
    call: gc as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn trap<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let result: () = this.Trap();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const trap_methodinfo: JSJitInfo = JSJitInfo {
    call: trap as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn webdriverCallback<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let arg0: HandleValue = if args.get(0).is_undefined() {
            HandleValue::undefined()
        } else {
            args.get(0)
        };
        let result: () = this.WebdriverCallback(cx, arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const webdriverCallback_methodinfo: JSJitInfo = JSJitInfo {
    call: webdriverCallback as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn webdriverTimeout<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let result: () = this.WebdriverTimeout();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const webdriverTimeout_methodinfo: JSJitInfo = JSJitInfo {
    call: webdriverTimeout as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_testRunner<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<TestRunner<TH>> = this.TestRunner();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const testRunner_getterinfo: JSJitInfo = JSJitInfo {
    call: get_testRunner as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_crypto<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Crypto<TH>> = this.Crypto();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const crypto_getterinfo: JSJitInfo = JSJitInfo {
    call: get_crypto as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onabort<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnabort();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onabort<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnabort(arg0);

        return true;
    }), false);
}


const onabort_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onabort as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onabort_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onabort as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onblur<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnblur();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onblur<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnblur(arg0);

        return true;
    }), false);
}


const onblur_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onblur as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onblur_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onblur as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oncancel<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOncancel();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oncancel<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOncancel(arg0);

        return true;
    }), false);
}


const oncancel_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oncancel as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oncancel_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oncancel as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oncanplay<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOncanplay();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oncanplay<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOncanplay(arg0);

        return true;
    }), false);
}


const oncanplay_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oncanplay as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oncanplay_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oncanplay as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oncanplaythrough<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOncanplaythrough();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oncanplaythrough<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOncanplaythrough(arg0);

        return true;
    }), false);
}


const oncanplaythrough_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oncanplaythrough as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oncanplaythrough_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oncanplaythrough as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onchange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnchange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onchange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnchange(arg0);

        return true;
    }), false);
}


const onchange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onchange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onclick<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnclick();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onclick<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnclick(arg0);

        return true;
    }), false);
}


const onclick_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onclick as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onclick_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onclick as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onclose<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnclose();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onclose<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnclose(arg0);

        return true;
    }), false);
}


const onclose_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onclose as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onclose_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onclose as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oncontextmenu<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOncontextmenu();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oncontextmenu<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOncontextmenu(arg0);

        return true;
    }), false);
}


const oncontextmenu_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oncontextmenu as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oncontextmenu_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oncontextmenu as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oncuechange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOncuechange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oncuechange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOncuechange(arg0);

        return true;
    }), false);
}


const oncuechange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oncuechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oncuechange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oncuechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondblclick<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndblclick();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondblclick<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndblclick(arg0);

        return true;
    }), false);
}


const ondblclick_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondblclick as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondblclick_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondblclick as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondrag<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndrag();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondrag<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndrag(arg0);

        return true;
    }), false);
}


const ondrag_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondrag as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondrag_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondrag as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondragend<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndragend();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondragend<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndragend(arg0);

        return true;
    }), false);
}


const ondragend_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondragend as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondragend_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondragend as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondragenter<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndragenter();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondragenter<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndragenter(arg0);

        return true;
    }), false);
}


const ondragenter_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondragenter as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondragenter_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondragenter as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondragexit<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndragexit();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondragexit<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndragexit(arg0);

        return true;
    }), false);
}


const ondragexit_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondragexit as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondragexit_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondragexit as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondragleave<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndragleave();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondragleave<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndragleave(arg0);

        return true;
    }), false);
}


const ondragleave_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondragleave as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondragleave_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondragleave as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondragover<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndragover();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondragover<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndragover(arg0);

        return true;
    }), false);
}


const ondragover_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondragover as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondragover_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondragover as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondragstart<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndragstart();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondragstart<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndragstart(arg0);

        return true;
    }), false);
}


const ondragstart_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondragstart as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondragstart_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondragstart as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondrop<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndrop();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondrop<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndrop(arg0);

        return true;
    }), false);
}


const ondrop_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondrop as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondrop_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondrop as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ondurationchange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOndurationchange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ondurationchange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOndurationchange(arg0);

        return true;
    }), false);
}


const ondurationchange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ondurationchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ondurationchange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ondurationchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onemptied<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnemptied();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onemptied<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnemptied(arg0);

        return true;
    }), false);
}


const onemptied_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onemptied as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onemptied_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onemptied as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onended<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnended();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onended<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnended(arg0);

        return true;
    }), false);
}


const onended_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onended as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onended_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onended as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onerror<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::OnErrorEventHandlerNonNull>> = this.GetOnerror();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onerror<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<OnErrorEventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(OnErrorEventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnerror(arg0);

        return true;
    }), false);
}


const onerror_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onerror as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onerror_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onerror as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onfocus<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnfocus();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onfocus<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnfocus(arg0);

        return true;
    }), false);
}


const onfocus_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onfocus as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onfocus_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onfocus as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oninput<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOninput();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oninput<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOninput(arg0);

        return true;
    }), false);
}


const oninput_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oninput as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oninput_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oninput as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_oninvalid<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOninvalid();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_oninvalid<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOninvalid(arg0);

        return true;
    }), false);
}


const oninvalid_getterinfo: JSJitInfo = JSJitInfo {
    call: get_oninvalid as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const oninvalid_setterinfo: JSJitInfo = JSJitInfo {
    call: set_oninvalid as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onkeydown<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnkeydown();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onkeydown<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnkeydown(arg0);

        return true;
    }), false);
}


const onkeydown_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onkeydown as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onkeydown_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onkeydown as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onkeypress<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnkeypress();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onkeypress<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnkeypress(arg0);

        return true;
    }), false);
}


const onkeypress_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onkeypress as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onkeypress_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onkeypress as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onkeyup<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnkeyup();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onkeyup<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnkeyup(arg0);

        return true;
    }), false);
}


const onkeyup_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onkeyup as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onkeyup_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onkeyup as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onload<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnload();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onload<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnload(arg0);

        return true;
    }), false);
}


const onload_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onload as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onload_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onload as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onloadeddata<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnloadeddata();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onloadeddata<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnloadeddata(arg0);

        return true;
    }), false);
}


const onloadeddata_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onloadeddata as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onloadeddata_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onloadeddata as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onloadedmetadata<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnloadedmetadata();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onloadedmetadata<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnloadedmetadata(arg0);

        return true;
    }), false);
}


const onloadedmetadata_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onloadedmetadata as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onloadedmetadata_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onloadedmetadata as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onloadstart<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnloadstart();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onloadstart<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnloadstart(arg0);

        return true;
    }), false);
}


const onloadstart_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onloadstart as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onloadstart_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onloadstart as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmousedown<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmousedown();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmousedown<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmousedown(arg0);

        return true;
    }), false);
}


const onmousedown_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmousedown as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmousedown_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmousedown as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmouseenter<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmouseenter();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmouseenter<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmouseenter(arg0);

        return true;
    }), false);
}


const onmouseenter_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmouseenter as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmouseenter_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmouseenter as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmouseleave<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmouseleave();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmouseleave<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmouseleave(arg0);

        return true;
    }), false);
}


const onmouseleave_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmouseleave as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmouseleave_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmouseleave as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmousemove<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmousemove();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmousemove<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmousemove(arg0);

        return true;
    }), false);
}


const onmousemove_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmousemove as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmousemove_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmousemove as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmouseout<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmouseout();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmouseout<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmouseout(arg0);

        return true;
    }), false);
}


const onmouseout_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmouseout as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmouseout_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmouseout as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmouseover<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmouseover();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmouseover<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmouseover(arg0);

        return true;
    }), false);
}


const onmouseover_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmouseover as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmouseover_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmouseover as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmouseup<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmouseup();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmouseup<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmouseup(arg0);

        return true;
    }), false);
}


const onmouseup_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmouseup as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmouseup_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmouseup as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onwheel<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnwheel();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onwheel<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnwheel(arg0);

        return true;
    }), false);
}


const onwheel_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onwheel as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onwheel_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onwheel as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onpause<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnpause();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onpause<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnpause(arg0);

        return true;
    }), false);
}


const onpause_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onpause as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onpause_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onpause as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onplay<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnplay();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onplay<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnplay(arg0);

        return true;
    }), false);
}


const onplay_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onplay as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onplay_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onplay as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onplaying<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnplaying();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onplaying<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnplaying(arg0);

        return true;
    }), false);
}


const onplaying_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onplaying as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onplaying_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onplaying as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onprogress<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnprogress();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onprogress<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnprogress(arg0);

        return true;
    }), false);
}


const onprogress_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onprogress as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onprogress_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onprogress as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onratechange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnratechange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onratechange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnratechange(arg0);

        return true;
    }), false);
}


const onratechange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onratechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onratechange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onratechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onreset<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnreset();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onreset<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnreset(arg0);

        return true;
    }), false);
}


const onreset_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onreset as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onreset_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onreset as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onresize<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnresize();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onresize<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnresize(arg0);

        return true;
    }), false);
}


const onresize_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onresize as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onresize_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onresize as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onscroll<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnscroll();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onscroll<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnscroll(arg0);

        return true;
    }), false);
}


const onscroll_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onscroll as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onscroll_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onscroll as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onseeked<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnseeked();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onseeked<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnseeked(arg0);

        return true;
    }), false);
}


const onseeked_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onseeked as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onseeked_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onseeked as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onseeking<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnseeking();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onseeking<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnseeking(arg0);

        return true;
    }), false);
}


const onseeking_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onseeking as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onseeking_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onseeking as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onselect<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnselect();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onselect<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnselect(arg0);

        return true;
    }), false);
}


const onselect_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onselect as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onselect_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onselect as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onshow<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnshow();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onshow<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnshow(arg0);

        return true;
    }), false);
}


const onshow_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onshow as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onshow_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onshow as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onstalled<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnstalled();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onstalled<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnstalled(arg0);

        return true;
    }), false);
}


const onstalled_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onstalled as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onstalled_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onstalled as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onsubmit<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnsubmit();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onsubmit<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnsubmit(arg0);

        return true;
    }), false);
}


const onsubmit_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onsubmit as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onsubmit_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onsubmit as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onsuspend<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnsuspend();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onsuspend<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnsuspend(arg0);

        return true;
    }), false);
}


const onsuspend_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onsuspend as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onsuspend_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onsuspend as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ontimeupdate<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOntimeupdate();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ontimeupdate<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOntimeupdate(arg0);

        return true;
    }), false);
}


const ontimeupdate_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ontimeupdate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ontimeupdate_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ontimeupdate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ontoggle<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOntoggle();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ontoggle<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOntoggle(arg0);

        return true;
    }), false);
}


const ontoggle_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ontoggle as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ontoggle_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ontoggle as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvolumechange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvolumechange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvolumechange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvolumechange(arg0);

        return true;
    }), false);
}


const onvolumechange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvolumechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvolumechange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvolumechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onwaiting<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnwaiting();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onwaiting<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnwaiting(arg0);

        return true;
    }), false);
}


const onwaiting_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onwaiting as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onwaiting_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onwaiting as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ontransitionend<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOntransitionend();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ontransitionend<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOntransitionend(arg0);

        return true;
    }), false);
}


const ontransitionend_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ontransitionend as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ontransitionend_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ontransitionend as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onafterprint<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnafterprint();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onafterprint<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnafterprint(arg0);

        return true;
    }), false);
}


const onafterprint_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onafterprint as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onafterprint_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onafterprint as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onbeforeprint<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnbeforeprint();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onbeforeprint<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnbeforeprint(arg0);

        return true;
    }), false);
}


const onbeforeprint_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onbeforeprint as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onbeforeprint_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onbeforeprint as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onbeforeunload<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::OnBeforeUnloadEventHandlerNonNull>> = this.GetOnbeforeunload();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onbeforeunload<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<OnBeforeUnloadEventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(OnBeforeUnloadEventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnbeforeunload(arg0);

        return true;
    }), false);
}


const onbeforeunload_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onbeforeunload as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onbeforeunload_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onbeforeunload as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onhashchange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnhashchange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onhashchange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnhashchange(arg0);

        return true;
    }), false);
}


const onhashchange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onhashchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onhashchange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onhashchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onlanguagechange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnlanguagechange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onlanguagechange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnlanguagechange(arg0);

        return true;
    }), false);
}


const onlanguagechange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onlanguagechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onlanguagechange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onlanguagechange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onmessage<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnmessage();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onmessage<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnmessage(arg0);

        return true;
    }), false);
}


const onmessage_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onmessage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onmessage_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onmessage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onoffline<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnoffline();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onoffline<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnoffline(arg0);

        return true;
    }), false);
}


const onoffline_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onoffline as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onoffline_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onoffline as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_ononline<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnonline();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_ononline<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnonline(arg0);

        return true;
    }), false);
}


const ononline_getterinfo: JSJitInfo = JSJitInfo {
    call: get_ononline as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const ononline_setterinfo: JSJitInfo = JSJitInfo {
    call: set_ononline as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onpagehide<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnpagehide();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onpagehide<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnpagehide(arg0);

        return true;
    }), false);
}


const onpagehide_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onpagehide as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onpagehide_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onpagehide as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onpageshow<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnpageshow();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onpageshow<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnpageshow(arg0);

        return true;
    }), false);
}


const onpageshow_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onpageshow as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onpageshow_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onpageshow as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onpopstate<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnpopstate();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onpopstate<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnpopstate(arg0);

        return true;
    }), false);
}


const onpopstate_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onpopstate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onpopstate_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onpopstate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onrejectionhandled<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnrejectionhandled();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onrejectionhandled<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnrejectionhandled(arg0);

        return true;
    }), false);
}


const onrejectionhandled_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onrejectionhandled as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onrejectionhandled_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onrejectionhandled as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onstorage<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnstorage();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onstorage<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnstorage(arg0);

        return true;
    }), false);
}


const onstorage_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onstorage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onstorage_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onstorage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onunhandledrejection<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnunhandledrejection();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onunhandledrejection<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnunhandledrejection(arg0);

        return true;
    }), false);
}


const onunhandledrejection_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onunhandledrejection as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onunhandledrejection_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onunhandledrejection as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onunload<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnunload();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onunload<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnunload(arg0);

        return true;
    }), false);
}


const onunload_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onunload as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onunload_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onunload as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplayconnect<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplayconnect();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplayconnect<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplayconnect(arg0);

        return true;
    }), false);
}


const onvrdisplayconnect_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplayconnect as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplayconnect_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplayconnect as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplaydisconnect<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplaydisconnect();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplaydisconnect<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplaydisconnect(arg0);

        return true;
    }), false);
}


const onvrdisplaydisconnect_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplaydisconnect as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplaydisconnect_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplaydisconnect as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplayactivate<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplayactivate();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplayactivate<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplayactivate(arg0);

        return true;
    }), false);
}


const onvrdisplayactivate_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplayactivate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplayactivate_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplayactivate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplaydeactivate<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplaydeactivate();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplaydeactivate<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplaydeactivate(arg0);

        return true;
    }), false);
}


const onvrdisplaydeactivate_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplaydeactivate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplaydeactivate_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplaydeactivate as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplayblur<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplayblur();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplayblur<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplayblur(arg0);

        return true;
    }), false);
}


const onvrdisplayblur_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplayblur as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplayblur_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplayblur as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplayfocus<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplayfocus();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplayfocus<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplayfocus(arg0);

        return true;
    }), false);
}


const onvrdisplayfocus_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplayfocus as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplayfocus_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplayfocus as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_onvrdisplaypresentchange<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull>> = this.GetOnvrdisplaypresentchange();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_onvrdisplaypresentchange<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let arg0: Option<Rc<EventHandlerNonNull>> = if args.get(0).get().is_object() {
            Some(EventHandlerNonNull::new(cx, args.get(0).get().to_object()))
        } else {
            None
        };
        let result: () = this.SetOnvrdisplaypresentchange(arg0);

        return true;
    }), false);
}


const onvrdisplaypresentchange_getterinfo: JSJitInfo = JSJitInfo {
    call: get_onvrdisplaypresentchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNKNOWN as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const onvrdisplaypresentchange_setterinfo: JSJitInfo = JSJitInfo {
    call: set_onvrdisplaypresentchange as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_localStorage<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Storage<TH>> = this.LocalStorage();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const localStorage_getterinfo: JSJitInfo = JSJitInfo {
    call: get_localStorage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_origin<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: USVString = this.Origin();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_origin<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        JS_DefineProperty(cx, obj, b"origin\0" as *const u8 as *const libc::c_char,
                          args.get(0), JSPROP_ENUMERATE, None, None)
    }), false);
}


const origin_getterinfo: JSJitInfo = JSJitInfo {
    call: get_origin as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_STRING as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const origin_setterinfo: JSJitInfo = JSJitInfo {
    call: set_origin as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn btoa<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.btoa\".");
            return false;
        }
        let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: Result<DOMString, Error> = this.Btoa(arg0);
        let result = match result {
            Ok(result) => result,
            Err(e) => {
                throw_dom_exception(cx, &this.global(), e);
                return false;
            },
        };

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const btoa_methodinfo: JSJitInfo = JSJitInfo {
    call: btoa as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_STRING as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn atob<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.atob\".");
            return false;
        }
        let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let result: Result<DOMString, Error> = this.Atob(arg0);
        let result = match result {
            Ok(result) => result,
            Err(e) => {
                throw_dom_exception(cx, &this.global(), e);
                return false;
            },
        };

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const atob_methodinfo: JSJitInfo = JSJitInfo {
    call: atob as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_STRING as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn setTimeout<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        let argcount = cmp::min(argc, 3);
        match argcount {
            1 => {
                if args.get(0).get().is_object() && !is_platform_object(args.get(0).get().to_object()) {
                    let arg0: Rc<Function> = if args.get(0).get().is_object() {
                        if IsCallable(args.get(0).get().to_object()) {
                            Function::new(cx, args.get(0).get().to_object())
                        } else {
                            throw_type_error(cx, "Value is not callable.");
                            return false;

                        }
                    } else {
                        throw_type_error(cx, "Value is not an object.");
                        return false;

                    };
                    let arg1: i32 = if args.get(1).is_undefined() {
                        0
                    } else {
                        match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return false;

                            }
                            _ => { return false;
                         }
                        }
                    };
                    let mut arg2 = vec![];
                    if argc > 2 {
                        arg2.reserve(argc as usize - 2);
                        for variadicArg in 2..argc {
                            let slot: HandleValue = args.get(variadicArg);
                            arg2.push(slot);
                        }
                    }
                    let result: i32 = this.SetTimeout(cx, arg0, arg1, arg2);

                    (result).to_jsval(cx, args.rval());
                    return true;
                }
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let arg1: i32 = if args.get(1).is_undefined() {
                    0
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                        Ok(ConversionResult::Success(v)) => v,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     }
                    }
                };
                let mut arg2 = vec![];
                if argc > 2 {
                    arg2.reserve(argc as usize - 2);
                    for variadicArg in 2..argc {
                        let slot: HandleValue = args.get(variadicArg);
                        arg2.push(slot);
                    }
                }
                let result: i32 = this.SetTimeout_(cx, arg0, arg1, arg2);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            2 => {
                if args.get(0).get().is_object() && !is_platform_object(args.get(0).get().to_object()) {
                    let arg0: Rc<Function> = if args.get(0).get().is_object() {
                        if IsCallable(args.get(0).get().to_object()) {
                            Function::new(cx, args.get(0).get().to_object())
                        } else {
                            throw_type_error(cx, "Value is not callable.");
                            return false;

                        }
                    } else {
                        throw_type_error(cx, "Value is not an object.");
                        return false;

                    };
                    let arg1: i32 = if args.get(1).is_undefined() {
                        0
                    } else {
                        match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return false;

                            }
                            _ => { return false;
                         }
                        }
                    };
                    let mut arg2 = vec![];
                    if argc > 2 {
                        arg2.reserve(argc as usize - 2);
                        for variadicArg in 2..argc {
                            let slot: HandleValue = args.get(variadicArg);
                            arg2.push(slot);
                        }
                    }
                    let result: i32 = this.SetTimeout(cx, arg0, arg1, arg2);

                    (result).to_jsval(cx, args.rval());
                    return true;
                }
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let arg1: i32 = if args.get(1).is_undefined() {
                    0
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                        Ok(ConversionResult::Success(v)) => v,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     }
                    }
                };
                let mut arg2 = vec![];
                if argc > 2 {
                    arg2.reserve(argc as usize - 2);
                    for variadicArg in 2..argc {
                        let slot: HandleValue = args.get(variadicArg);
                        arg2.push(slot);
                    }
                }
                let result: i32 = this.SetTimeout_(cx, arg0, arg1, arg2);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            3 => {
                if args.get(0).get().is_object() && !is_platform_object(args.get(0).get().to_object()) {
                    let arg0: Rc<Function> = if args.get(0).get().is_object() {
                        if IsCallable(args.get(0).get().to_object()) {
                            Function::new(cx, args.get(0).get().to_object())
                        } else {
                            throw_type_error(cx, "Value is not callable.");
                            return false;

                        }
                    } else {
                        throw_type_error(cx, "Value is not an object.");
                        return false;

                    };
                    let arg1: i32 = if args.get(1).is_undefined() {
                        0
                    } else {
                        match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return false;

                            }
                            _ => { return false;
                         }
                        }
                    };
                    let mut arg2 = vec![];
                    if argc > 2 {
                        arg2.reserve(argc as usize - 2);
                        for variadicArg in 2..argc {
                            let slot: HandleValue = args.get(variadicArg);
                            arg2.push(slot);
                        }
                    }
                    let result: i32 = this.SetTimeout(cx, arg0, arg1, arg2);

                    (result).to_jsval(cx, args.rval());
                    return true;
                }
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let arg1: i32 = if args.get(1).is_undefined() {
                    0
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                        Ok(ConversionResult::Success(v)) => v,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     }
                    }
                };
                let mut arg2 = vec![];
                if argc > 2 {
                    arg2.reserve(argc as usize - 2);
                    for variadicArg in 2..argc {
                        let slot: HandleValue = args.get(variadicArg);
                        arg2.push(slot);
                    }
                }
                let result: i32 = this.SetTimeout_(cx, arg0, arg1, arg2);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            _ => {
                throw_type_error(cx, "Not enough arguments to \"Window.setTimeout\".");
                return false;
            }
        }
    }), false);
}


const setTimeout_methodinfo: JSJitInfo = JSJitInfo {
    call: setTimeout as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn clearTimeout<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let arg0: i32 = if args.get(0).is_undefined() {
            0
        } else {
            match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
                Ok(ConversionResult::Success(v)) => v,
                Ok(ConversionResult::Failure(error)) => {
                    throw_type_error(cx, &error);
                    return false;

                }
                _ => { return false;
             }
            }
        };
        let result: () = this.ClearTimeout(arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const clearTimeout_methodinfo: JSJitInfo = JSJitInfo {
    call: clearTimeout as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn setInterval<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        let argcount = cmp::min(argc, 3);
        match argcount {
            1 => {
                if args.get(0).get().is_object() && !is_platform_object(args.get(0).get().to_object()) {
                    let arg0: Rc<Function> = if args.get(0).get().is_object() {
                        if IsCallable(args.get(0).get().to_object()) {
                            Function::new(cx, args.get(0).get().to_object())
                        } else {
                            throw_type_error(cx, "Value is not callable.");
                            return false;

                        }
                    } else {
                        throw_type_error(cx, "Value is not an object.");
                        return false;

                    };
                    let arg1: i32 = if args.get(1).is_undefined() {
                        0
                    } else {
                        match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return false;

                            }
                            _ => { return false;
                         }
                        }
                    };
                    let mut arg2 = vec![];
                    if argc > 2 {
                        arg2.reserve(argc as usize - 2);
                        for variadicArg in 2..argc {
                            let slot: HandleValue = args.get(variadicArg);
                            arg2.push(slot);
                        }
                    }
                    let result: i32 = this.SetInterval(cx, arg0, arg1, arg2);

                    (result).to_jsval(cx, args.rval());
                    return true;
                }
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let arg1: i32 = if args.get(1).is_undefined() {
                    0
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                        Ok(ConversionResult::Success(v)) => v,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     }
                    }
                };
                let mut arg2 = vec![];
                if argc > 2 {
                    arg2.reserve(argc as usize - 2);
                    for variadicArg in 2..argc {
                        let slot: HandleValue = args.get(variadicArg);
                        arg2.push(slot);
                    }
                }
                let result: i32 = this.SetInterval_(cx, arg0, arg1, arg2);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            2 => {
                if args.get(0).get().is_object() && !is_platform_object(args.get(0).get().to_object()) {
                    let arg0: Rc<Function> = if args.get(0).get().is_object() {
                        if IsCallable(args.get(0).get().to_object()) {
                            Function::new(cx, args.get(0).get().to_object())
                        } else {
                            throw_type_error(cx, "Value is not callable.");
                            return false;

                        }
                    } else {
                        throw_type_error(cx, "Value is not an object.");
                        return false;

                    };
                    let arg1: i32 = if args.get(1).is_undefined() {
                        0
                    } else {
                        match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return false;

                            }
                            _ => { return false;
                         }
                        }
                    };
                    let mut arg2 = vec![];
                    if argc > 2 {
                        arg2.reserve(argc as usize - 2);
                        for variadicArg in 2..argc {
                            let slot: HandleValue = args.get(variadicArg);
                            arg2.push(slot);
                        }
                    }
                    let result: i32 = this.SetInterval(cx, arg0, arg1, arg2);

                    (result).to_jsval(cx, args.rval());
                    return true;
                }
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let arg1: i32 = if args.get(1).is_undefined() {
                    0
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                        Ok(ConversionResult::Success(v)) => v,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     }
                    }
                };
                let mut arg2 = vec![];
                if argc > 2 {
                    arg2.reserve(argc as usize - 2);
                    for variadicArg in 2..argc {
                        let slot: HandleValue = args.get(variadicArg);
                        arg2.push(slot);
                    }
                }
                let result: i32 = this.SetInterval_(cx, arg0, arg1, arg2);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            3 => {
                if args.get(0).get().is_object() && !is_platform_object(args.get(0).get().to_object()) {
                    let arg0: Rc<Function> = if args.get(0).get().is_object() {
                        if IsCallable(args.get(0).get().to_object()) {
                            Function::new(cx, args.get(0).get().to_object())
                        } else {
                            throw_type_error(cx, "Value is not callable.");
                            return false;

                        }
                    } else {
                        throw_type_error(cx, "Value is not an object.");
                        return false;

                    };
                    let arg1: i32 = if args.get(1).is_undefined() {
                        0
                    } else {
                        match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                            Ok(ConversionResult::Success(v)) => v,
                            Ok(ConversionResult::Failure(error)) => {
                                throw_type_error(cx, &error);
                                return false;

                            }
                            _ => { return false;
                         }
                        }
                    };
                    let mut arg2 = vec![];
                    if argc > 2 {
                        arg2.reserve(argc as usize - 2);
                        for variadicArg in 2..argc {
                            let slot: HandleValue = args.get(variadicArg);
                            arg2.push(slot);
                        }
                    }
                    let result: i32 = this.SetInterval(cx, arg0, arg1, arg2);

                    (result).to_jsval(cx, args.rval());
                    return true;
                }
                let arg0: DOMString = match FromJSValConvertible::from_jsval(cx, args.get(0), StringificationBehavior::Default) {
                    Ok(ConversionResult::Success(strval)) => strval,
                    Ok(ConversionResult::Failure(error)) => {
                        throw_type_error(cx, &error);
                        return false;

                    }
                    _ => { return false;
                 },
                };
                let arg1: i32 = if args.get(1).is_undefined() {
                    0
                } else {
                    match FromJSValConvertible::from_jsval(cx, args.get(1), ConversionBehavior::Default) {
                        Ok(ConversionResult::Success(v)) => v,
                        Ok(ConversionResult::Failure(error)) => {
                            throw_type_error(cx, &error);
                            return false;

                        }
                        _ => { return false;
                     }
                    }
                };
                let mut arg2 = vec![];
                if argc > 2 {
                    arg2.reserve(argc as usize - 2);
                    for variadicArg in 2..argc {
                        let slot: HandleValue = args.get(variadicArg);
                        arg2.push(slot);
                    }
                }
                let result: i32 = this.SetInterval_(cx, arg0, arg1, arg2);

                (result).to_jsval(cx, args.rval());
                return true;
            }
            _ => {
                throw_type_error(cx, "Not enough arguments to \"Window.setInterval\".");
                return false;
            }
        }
    }), false);
}


const setInterval_methodinfo: JSJitInfo = JSJitInfo {
    call: setInterval as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_INT32 as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn clearInterval<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;
        let arg0: i32 = if args.get(0).is_undefined() {
            0
        } else {
            match FromJSValConvertible::from_jsval(cx, args.get(0), ConversionBehavior::Default) {
                Ok(ConversionResult::Success(v)) => v,
                Ok(ConversionResult::Failure(error)) => {
                    throw_type_error(cx, &error);
                    return false;

                }
                _ => { return false;
             }
            }
        };
        let result: () = this.ClearInterval(arg0);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const clearInterval_methodinfo: JSJitInfo = JSJitInfo {
    call: clearInterval as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn fetch<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: *const JSJitMethodCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let args = &*args;
        let argc = args._base.argc_;

        if argc < 1 {
            throw_type_error(cx, "Not enough arguments to \"Window.fetch\".");
            return false;
        }
        let arg0: UnionTypes::RequestOrUSVString<TH> = match FromJSValConvertible::from_jsval(cx, args.get(0), ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                throw_type_error(cx, &error);
                return false;

            }
            _ => { return false;
         },
        };
        let arg1: RootedTraceableBox<dom::bindings::codegen::Bindings::RequestBinding::RequestInit> = if args.get(1).is_undefined() {
            dom::bindings::codegen::Bindings::RequestBinding::RequestInit::empty(cx)
        } else {
            match FromJSValConvertible::from_jsval(cx, args.get(1), ()) {
                Ok(ConversionResult::Success(dictionary)) => dictionary,
                Ok(ConversionResult::Failure(error)) => {
                    throw_type_error(cx, &error);
                    return false;

                }
                _ => { return false;
             },
            }
        };
        let result: Rc<Promise<TH>> = this.Fetch(arg0, arg1);

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const fetch_methodinfo: JSJitInfo = JSJitInfo {
    call: fetch as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Method as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_performance<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Performance<TH>> = this.Performance();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}

unsafe extern fn set_performance<TH: TypeHolderTrait>
(cx: *mut JSContext, obj: HandleObject, this: *const Window<TH>, args: JSJitSetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        JS_DefineProperty(cx, obj, b"performance\0" as *const u8 as *const libc::c_char,
                          args.get(0), JSPROP_ENUMERATE, None, None)
    }), false);
}


const performance_getterinfo: JSJitInfo = JSJitInfo {
    call: get_performance as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

const performance_setterinfo: JSJitInfo = JSJitInfo {
    call: set_performance as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Setter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_UNDEFINED as u8,
        false,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn get_sessionStorage<TH: TypeHolderTrait>
(cx: *mut JSContext, _obj: HandleObject, this: *const Window<TH>, args: JSJitGetterCallArgs) -> bool {
    return wrap_panic(panic::AssertUnwindSafe(|| {
        let this = &*this;
        let result: DomRoot<Storage<TH>> = this.SessionStorage();

        (result).to_jsval(cx, args.rval());
        return true;
    }), false);
}


const sessionStorage_getterinfo: JSJitInfo = JSJitInfo {
    call: get_sessionStorage as *const os::raw::c_void,
    protoID: PrototypeList::ID::Window as u16,
    depth: 2,
    _bitfield_1: new_jsjitinfo_bitfield_1!(
        JSJitInfo_OpType::Getter as u8,
        JSJitInfo_AliasSet::AliasEverything as u8,
        JSValueType::JSVAL_TYPE_OBJECT as u8,
        true,
        false,
        false,
        false,
        false,
        false,
        0,
    ),
};

unsafe extern fn _finalize<TH: TypeHolderTrait>
(_fop: *mut JSFreeOp, obj: *mut JSObject) {
    return wrap_panic(panic::AssertUnwindSafe(|| {

        let this = native_from_object::<Window<TH>>(obj).unwrap();
        finalize_global(obj);
            if !this.is_null() {
                // The pointer can be null if the object is the unforgeable holder of that interface.
                let _ = Box::from_raw(this as *mut Window<TH>);
            }
            debug!("Window<TH> finalize: {:p}", this);
    }), ());
}

unsafe extern fn _trace<TH: TypeHolderTrait>
(trc: *mut JSTracer, obj: *mut JSObject) {
    return wrap_panic(panic::AssertUnwindSafe(|| {

        let this = native_from_object::<Window<TH>>(obj).unwrap();
        if this.is_null() { return; } // GC during obj creation
        (*this).trace(trc);
        trace_global(trc, obj);
    }), ());
}

static CLASS_OPS: js::jsapi::JSClassOps = js::jsapi::JSClassOps {
    addProperty: None,
    delProperty: None,
    getProperty: None,
    setProperty: None,
    enumerate: Some(enumerate_global),
    resolve: Some(resolve_global),
    mayResolve: None,
    finalize: Some(_finalize),
    call: None,
    hasInstance: None,
    construct: None,
    trace: Some(js::jsapi::JS_GlobalObjectTraceHook),
};

static Class: DOMJSClass = DOMJSClass {
    base: js::jsapi::JSClass {
        name: b"Window\0" as *const u8 as *const libc::c_char,
        flags: JSCLASS_IS_DOMJSCLASS | JSCLASS_IS_GLOBAL | JSCLASS_DOM_GLOBAL |
               (((JSCLASS_GLOBAL_SLOT_COUNT + 1) & JSCLASS_RESERVED_SLOTS_MASK) << JSCLASS_RESERVED_SLOTS_SHIFT)
               /* JSCLASS_HAS_RESERVED_SLOTS(JSCLASS_GLOBAL_SLOT_COUNT + 1) */,
        cOps: &CLASS_OPS,
        reserved: [0 as *mut _; 3],
    },
    dom_class: DOMClass {
    interface_chain: [ PrototypeList::ID::EventTarget, PrototypeList::ID::GlobalScope, PrototypeList::ID::Window, PrototypeList::ID::Last, PrototypeList::ID::Last, PrototypeList::ID::Last ],
    type_id: ::dom::bindings::codegen::InheritTypes::TopTypeId { eventtarget: (::dom::bindings::codegen::InheritTypes::EventTargetTypeId::GlobalScope(::dom::bindings::codegen::InheritTypes::GlobalScopeTypeId::Window)) },
    global: InterfaceObjectMap::Globals::WINDOW,
}
};

#[inline]
fn malloc_size<TH: TypeHolderTrait>(ops: &mut MallocSizeOfOps, obj: *const c_void) -> usize {
    malloc_size_of_including_raw_self::<Window<TH>>(ops, obj)
}

pub unsafe fn Wrap<TH: TypeHolderTrait>
(cx: *mut JSContext, object: Box<Window<TH>>) -> DomRoot<Window<TH>> {
    let raw = Box::into_raw(object);
    let _rt = RootedTraceable::new(&*raw);

    rooted!(in(cx) let mut obj = ptr::null_mut::<JSObject>());
    create_global_object(
        cx,
        &Class.base,
        raw as *const libc::c_void,
        _trace,
        obj.handle_mut());
    assert!(!obj.is_null());

    (*raw).init_reflector(obj.get());

    let _ac = JSAutoCompartment::new(cx, obj.get());
    rooted!(in(cx) let mut proto = ptr::null_mut::<JSObject>());
    GetProtoObject(cx, obj.handle(), proto.handle_mut());
    assert!(JS_SplicePrototype(cx, obj.handle(), proto.handle()));
    let mut immutable = false;
    assert!(JS_SetImmutablePrototype(cx, obj.handle(), &mut immutable));
    assert!(immutable);

    define_guarded_properties(cx, obj.handle(), sAttributes);
    define_guarded_methods(cx, obj.handle(), sMethods);

    rooted!(in(cx) let mut unforgeable_holder = ptr::null_mut::<JSObject>());
    unforgeable_holder.handle_mut().set(
        JS_GetReservedSlot(proto.get(), DOM_PROTO_UNFORGEABLE_HOLDER_SLOT).to_object());
    assert!(JS_CopyPropertiesFrom(cx, obj.handle(), unforgeable_holder.handle()));


    DomRoot::from_ref(&*raw)
}

impl<TH: TypeHolderTrait> IDLInterface for Window<TH> {
    #[inline]
    fn derives(class: &'static DOMClass) -> bool {
        class as *const _ == &Class.dom_class as *const _
    }
}

impl<TH: TypeHolderTrait> PartialEq for Window<TH> {
    fn eq(&self, other: &Window<TH>) -> bool {
        self as *const Window<TH> == &*other
    }
}

pub trait WindowMethods<TH: TypeHolderTrait> {
    fn Window(&self) -> DomRoot<WindowProxy<TH>>;
    fn Self_(&self) -> DomRoot<WindowProxy<TH>>;
    fn Document(&self) -> DomRoot<Document<TH>>;
    fn Name(&self) -> DOMString;
    fn SetName(&self, value: DOMString) -> ();
    fn Location(&self) -> DomRoot<Location<TH>>;
    fn History(&self) -> DomRoot<History<TH>>;
    fn CustomElements(&self) -> DomRoot<CustomElementRegistry<TH>>;
    fn Status(&self) -> DOMString;
    fn SetStatus(&self, value: DOMString) -> ();
    fn Close(&self) -> ();
    fn Closed(&self) -> bool;
    fn Frames(&self) -> DomRoot<WindowProxy<TH>>;
    fn GetTop(&self) -> Option<DomRoot<WindowProxy<TH>>>;
    fn GetParent(&self) -> Option<DomRoot<WindowProxy<TH>>>;
    fn GetFrameElement(&self) -> Option<DomRoot<Element<TH>>>;
    fn Navigator(&self) -> DomRoot<Navigator<TH>>;
    fn Alert(&self, message: DOMString) -> ();
    fn Alert_(&self) -> ();
    fn RequestAnimationFrame(&self, callback: Rc<FrameRequestCallback<TH>>) -> u32;
    fn CancelAnimationFrame(&self, handle: u32) -> ();
    unsafe fn PostMessage(&self, cx: *mut JSContext, message: HandleValue, targetOrigin: DOMString) -> Fallible<(), TH>;
    fn CaptureEvents(&self) -> ();
    fn ReleaseEvents(&self) -> ();
    fn GetComputedStyle(&self, elt: &Element<TH>, pseudoElt: Option<DOMString>) -> DomRoot<CSSStyleDeclaration<TH>>;
    fn MatchMedia(&self, query: DOMString) -> DomRoot<MediaQueryList<TH>>;
    fn Screen(&self) -> DomRoot<Screen<TH>>;
    fn MoveTo(&self, x: i32, y: i32) -> ();
    fn MoveBy(&self, x: i32, y: i32) -> ();
    fn ResizeTo(&self, x: i32, y: i32) -> ();
    fn ResizeBy(&self, x: i32, y: i32) -> ();
    fn InnerWidth(&self) -> i32;
    fn InnerHeight(&self) -> i32;
    fn ScrollX(&self) -> i32;
    fn PageXOffset(&self) -> i32;
    fn ScrollY(&self) -> i32;
    fn PageYOffset(&self) -> i32;
    fn Scroll(&self, options: &dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions) -> ();
    fn Scroll_(&self, x: f64, y: f64) -> ();
    fn ScrollTo(&self, options: &dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions) -> ();
    fn ScrollTo_(&self, x: f64, y: f64) -> ();
    fn ScrollBy(&self, options: &dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions) -> ();
    fn ScrollBy_(&self, x: f64, y: f64) -> ();
    fn ScreenX(&self) -> i32;
    fn ScreenY(&self) -> i32;
    fn OuterWidth(&self) -> i32;
    fn OuterHeight(&self) -> i32;
    fn DevicePixelRatio(&self) -> Finite<f64>;
    fn Debug(&self, arg: DOMString) -> ();
    fn Gc(&self) -> ();
    fn Trap(&self) -> ();
    unsafe fn WebdriverCallback(&self, cx: *mut JSContext, result: HandleValue) -> ();
    fn WebdriverTimeout(&self) -> ();
    fn TestRunner(&self) -> DomRoot<TestRunner<TH>>;
    fn Crypto(&self) -> DomRoot<Crypto<TH>>;
    fn GetOnabort(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnabort(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnblur(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnblur(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOncancel(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOncancel(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOncanplay(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOncanplay(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOncanplaythrough(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOncanplaythrough(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnchange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnchange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnclick(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnclick(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnclose(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnclose(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOncontextmenu(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOncontextmenu(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOncuechange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOncuechange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndblclick(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndblclick(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndrag(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndrag(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndragend(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndragend(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndragenter(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndragenter(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndragexit(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndragexit(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndragleave(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndragleave(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndragover(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndragover(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndragstart(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndragstart(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndrop(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndrop(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOndurationchange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOndurationchange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnemptied(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnemptied(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnended(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnended(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnerror(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::OnErrorEventHandlerNonNull<TH>>>;
    fn SetOnerror(&self, value: Option<Rc<OnErrorEventHandlerNonNull<TH>>>) -> ();
    fn GetOnfocus(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnfocus(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOninput(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOninput(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOninvalid(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOninvalid(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnkeydown(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnkeydown(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnkeypress(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnkeypress(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnkeyup(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnkeyup(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnload(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnload(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnloadeddata(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnloadeddata(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnloadedmetadata(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnloadedmetadata(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnloadstart(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnloadstart(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmousedown(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmousedown(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmouseenter(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmouseenter(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmouseleave(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmouseleave(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmousemove(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmousemove(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmouseout(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmouseout(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmouseover(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmouseover(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmouseup(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmouseup(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnwheel(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnwheel(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnpause(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnpause(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnplay(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnplay(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnplaying(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnplaying(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnprogress(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnprogress(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnratechange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnratechange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnreset(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnreset(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnresize(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnresize(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnscroll(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnscroll(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnseeked(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnseeked(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnseeking(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnseeking(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnselect(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnselect(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnshow(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnshow(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnstalled(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnstalled(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnsubmit(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnsubmit(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnsuspend(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnsuspend(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOntimeupdate(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOntimeupdate(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOntoggle(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOntoggle(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvolumechange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvolumechange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnwaiting(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnwaiting(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOntransitionend(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOntransitionend(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnafterprint(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnafterprint(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnbeforeprint(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnbeforeprint(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnbeforeunload(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::OnBeforeUnloadEventHandlerNonNull<TH>>>;
    fn SetOnbeforeunload(&self, value: Option<Rc<OnBeforeUnloadEventHandlerNonNull<TH>>>) -> ();
    fn GetOnhashchange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnhashchange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnlanguagechange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnlanguagechange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnmessage(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnmessage(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnoffline(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnoffline(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnonline(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnonline(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnpagehide(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnpagehide(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnpageshow(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnpageshow(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnpopstate(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnpopstate(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnrejectionhandled(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnrejectionhandled(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnstorage(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnstorage(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnunhandledrejection(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnunhandledrejection(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnunload(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnunload(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplayconnect(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplayconnect(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplaydisconnect(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplaydisconnect(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplayactivate(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplayactivate(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplaydeactivate(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplaydeactivate(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplayblur(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplayblur(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplayfocus(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplayfocus(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn GetOnvrdisplaypresentchange(&self) -> Option<Rc<dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull<TH>>>;
    fn SetOnvrdisplaypresentchange(&self, value: Option<Rc<EventHandlerNonNull<TH>>>) -> ();
    fn LocalStorage(&self) -> DomRoot<Storage<TH>>;
    fn Origin(&self) -> USVString;
    fn Btoa(&self, data: DOMString) -> Fallible<DOMString, TH>;
    fn Atob(&self, data: DOMString) -> Fallible<DOMString, TH>;
    unsafe fn SetTimeout(&self, cx: *mut JSContext, handler: Rc<Function<TH>>, timeout: i32, arguments: Vec<HandleValue>) -> i32;
    unsafe fn SetTimeout_(&self, cx: *mut JSContext, handler: DOMString, timeout: i32, arguments: Vec<HandleValue>) -> i32;
    fn ClearTimeout(&self, handle: i32) -> ();
    unsafe fn SetInterval(&self, cx: *mut JSContext, handler: Rc<Function<TH>>, timeout: i32, arguments: Vec<HandleValue>) -> i32;
    unsafe fn SetInterval_(&self, cx: *mut JSContext, handler: DOMString, timeout: i32, arguments: Vec<HandleValue>) -> i32;
    fn ClearInterval(&self, handle: i32) -> ();
    fn Fetch(&self, input: UnionTypes::RequestOrUSVString<TH>, init: RootedTraceableBox<dom::bindings::codegen::Bindings::RequestBinding::RequestInit<TH>>) -> Rc<Promise<TH>>;
    fn Performance(&self) -> DomRoot<Performance<TH>>;
    fn SessionStorage(&self) -> DomRoot<Storage<TH>>;
}
const sMethods_specs: &'static [&'static[JSFunctionSpec]] = &[
&[
    JSFunctionSpec {
        name: b"close\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &close_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"alert\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &alert_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"requestAnimationFrame\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &requestAnimationFrame_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"cancelAnimationFrame\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &cancelAnimationFrame_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"postMessage\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &postMessage_methodinfo as *const _ as *const JSJitInfo },
        nargs: 2,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"captureEvents\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &captureEvents_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"releaseEvents\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &releaseEvents_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"getComputedStyle\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &getComputedStyle_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"matchMedia\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &matchMedia_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"moveTo\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &moveTo_methodinfo as *const _ as *const JSJitInfo },
        nargs: 2,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"moveBy\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &moveBy_methodinfo as *const _ as *const JSJitInfo },
        nargs: 2,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"resizeTo\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &resizeTo_methodinfo as *const _ as *const JSJitInfo },
        nargs: 2,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"resizeBy\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &resizeBy_methodinfo as *const _ as *const JSJitInfo },
        nargs: 2,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"scroll\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &scroll_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"scrollTo\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &scrollTo_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"scrollBy\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &scrollBy_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"debug\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &debug_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"gc\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &gc_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"trap\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &trap_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"webdriverCallback\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &webdriverCallback_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"webdriverTimeout\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &webdriverTimeout_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"btoa\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &btoa_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"atob\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &atob_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"setTimeout\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &setTimeout_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"clearTimeout\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &clearTimeout_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"setInterval\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &setInterval_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"clearInterval\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &clearInterval_methodinfo as *const _ as *const JSJitInfo },
        nargs: 0,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: b"fetch\0" as *const u8 as *const libc::c_char,
        call: JSNativeWrapper { op: Some(generic_method), info: &fetch_methodinfo as *const _ as *const JSJitInfo },
        nargs: 1,
        flags: (JSPROP_ENUMERATE) as u16,
        selfHostedName: 0 as *const libc::c_char
    },
    JSFunctionSpec {
        name: 0 as *const libc::c_char,
        call: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        nargs: 0,
        flags: 0,
        selfHostedName: 0 as *const libc::c_char
    }]

];
const sMethods: &'static [Guard<&'static [JSFunctionSpec]>] = &[
    Guard::new(Condition::Satisfied, sMethods_specs[0])
];
const sAttributes_specs: &'static [&'static[JSPropertySpec]] = &[
&[
    JSPropertySpec {
        name: b"self\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &self_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &self_setterinfo }
    },
    JSPropertySpec {
        name: b"name\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &name_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &name_setterinfo }
    },
    JSPropertySpec {
        name: b"history\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &history_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: 0 as *const libc::c_char,
        flags: 0,
        getter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    }]
,
&[
    JSPropertySpec {
        name: b"customElements\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &customElements_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: 0 as *const libc::c_char,
        flags: 0,
        getter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    }]
,
&[
    JSPropertySpec {
        name: b"status\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &status_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &status_setterinfo }
    },
    JSPropertySpec {
        name: b"closed\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &closed_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"frames\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &frames_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &frames_setterinfo }
    },
    JSPropertySpec {
        name: b"parent\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &parent_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"frameElement\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &frameElement_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"navigator\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &navigator_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"screen\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &screen_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"innerWidth\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &innerWidth_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"innerHeight\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &innerHeight_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"scrollX\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &scrollX_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"pageXOffset\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &pageXOffset_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"scrollY\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &scrollY_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"pageYOffset\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &pageYOffset_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"screenX\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &screenX_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"screenY\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &screenY_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"outerWidth\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &outerWidth_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"outerHeight\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &outerHeight_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"devicePixelRatio\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &devicePixelRatio_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: 0 as *const libc::c_char,
        flags: 0,
        getter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    }]
,
&[
    JSPropertySpec {
        name: b"testRunner\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &testRunner_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: 0 as *const libc::c_char,
        flags: 0,
        getter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    }]
,
&[
    JSPropertySpec {
        name: b"crypto\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &crypto_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"onabort\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onabort_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onabort_setterinfo }
    },
    JSPropertySpec {
        name: b"onblur\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onblur_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onblur_setterinfo }
    },
    JSPropertySpec {
        name: b"oncancel\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oncancel_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oncancel_setterinfo }
    },
    JSPropertySpec {
        name: b"oncanplay\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oncanplay_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oncanplay_setterinfo }
    },
    JSPropertySpec {
        name: b"oncanplaythrough\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oncanplaythrough_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oncanplaythrough_setterinfo }
    },
    JSPropertySpec {
        name: b"onchange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onchange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onchange_setterinfo }
    },
    JSPropertySpec {
        name: b"onclick\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onclick_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onclick_setterinfo }
    },
    JSPropertySpec {
        name: b"onclose\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onclose_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onclose_setterinfo }
    },
    JSPropertySpec {
        name: b"oncontextmenu\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oncontextmenu_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oncontextmenu_setterinfo }
    },
    JSPropertySpec {
        name: b"oncuechange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oncuechange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oncuechange_setterinfo }
    },
    JSPropertySpec {
        name: b"ondblclick\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondblclick_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondblclick_setterinfo }
    },
    JSPropertySpec {
        name: b"ondrag\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondrag_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondrag_setterinfo }
    },
    JSPropertySpec {
        name: b"ondragend\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondragend_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondragend_setterinfo }
    },
    JSPropertySpec {
        name: b"ondragenter\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondragenter_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondragenter_setterinfo }
    },
    JSPropertySpec {
        name: b"ondragexit\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondragexit_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondragexit_setterinfo }
    },
    JSPropertySpec {
        name: b"ondragleave\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondragleave_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondragleave_setterinfo }
    },
    JSPropertySpec {
        name: b"ondragover\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondragover_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondragover_setterinfo }
    },
    JSPropertySpec {
        name: b"ondragstart\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondragstart_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondragstart_setterinfo }
    },
    JSPropertySpec {
        name: b"ondrop\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondrop_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondrop_setterinfo }
    },
    JSPropertySpec {
        name: b"ondurationchange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ondurationchange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ondurationchange_setterinfo }
    },
    JSPropertySpec {
        name: b"onemptied\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onemptied_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onemptied_setterinfo }
    },
    JSPropertySpec {
        name: b"onended\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onended_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onended_setterinfo }
    },
    JSPropertySpec {
        name: b"onerror\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onerror_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onerror_setterinfo }
    },
    JSPropertySpec {
        name: b"onfocus\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onfocus_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onfocus_setterinfo }
    },
    JSPropertySpec {
        name: b"oninput\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oninput_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oninput_setterinfo }
    },
    JSPropertySpec {
        name: b"oninvalid\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &oninvalid_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &oninvalid_setterinfo }
    },
    JSPropertySpec {
        name: b"onkeydown\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onkeydown_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onkeydown_setterinfo }
    },
    JSPropertySpec {
        name: b"onkeypress\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onkeypress_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onkeypress_setterinfo }
    },
    JSPropertySpec {
        name: b"onkeyup\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onkeyup_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onkeyup_setterinfo }
    },
    JSPropertySpec {
        name: b"onload\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onload_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onload_setterinfo }
    },
    JSPropertySpec {
        name: b"onloadeddata\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onloadeddata_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onloadeddata_setterinfo }
    },
    JSPropertySpec {
        name: b"onloadedmetadata\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onloadedmetadata_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onloadedmetadata_setterinfo }
    },
    JSPropertySpec {
        name: b"onloadstart\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onloadstart_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onloadstart_setterinfo }
    },
    JSPropertySpec {
        name: b"onmousedown\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onmousedown_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onmousedown_setterinfo }
    },
    JSPropertySpec {
        name: b"onmouseenter\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_lenient_getter), info: &onmouseenter_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_lenient_setter), info: &onmouseenter_setterinfo }
    },
    JSPropertySpec {
        name: b"onmouseleave\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_lenient_getter), info: &onmouseleave_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_lenient_setter), info: &onmouseleave_setterinfo }
    },
    JSPropertySpec {
        name: b"onmousemove\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onmousemove_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onmousemove_setterinfo }
    },
    JSPropertySpec {
        name: b"onmouseout\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onmouseout_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onmouseout_setterinfo }
    },
    JSPropertySpec {
        name: b"onmouseover\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onmouseover_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onmouseover_setterinfo }
    },
    JSPropertySpec {
        name: b"onmouseup\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onmouseup_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onmouseup_setterinfo }
    },
    JSPropertySpec {
        name: b"onwheel\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onwheel_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onwheel_setterinfo }
    },
    JSPropertySpec {
        name: b"onpause\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onpause_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onpause_setterinfo }
    },
    JSPropertySpec {
        name: b"onplay\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onplay_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onplay_setterinfo }
    },
    JSPropertySpec {
        name: b"onplaying\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onplaying_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onplaying_setterinfo }
    },
    JSPropertySpec {
        name: b"onprogress\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onprogress_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onprogress_setterinfo }
    },
    JSPropertySpec {
        name: b"onratechange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onratechange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onratechange_setterinfo }
    },
    JSPropertySpec {
        name: b"onreset\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onreset_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onreset_setterinfo }
    },
    JSPropertySpec {
        name: b"onresize\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onresize_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onresize_setterinfo }
    },
    JSPropertySpec {
        name: b"onscroll\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onscroll_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onscroll_setterinfo }
    },
    JSPropertySpec {
        name: b"onseeked\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onseeked_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onseeked_setterinfo }
    },
    JSPropertySpec {
        name: b"onseeking\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onseeking_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onseeking_setterinfo }
    },
    JSPropertySpec {
        name: b"onselect\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onselect_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onselect_setterinfo }
    },
    JSPropertySpec {
        name: b"onshow\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onshow_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onshow_setterinfo }
    },
    JSPropertySpec {
        name: b"onstalled\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onstalled_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onstalled_setterinfo }
    },
    JSPropertySpec {
        name: b"onsubmit\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onsubmit_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onsubmit_setterinfo }
    },
    JSPropertySpec {
        name: b"onsuspend\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onsuspend_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onsuspend_setterinfo }
    },
    JSPropertySpec {
        name: b"ontimeupdate\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ontimeupdate_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ontimeupdate_setterinfo }
    },
    JSPropertySpec {
        name: b"ontoggle\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ontoggle_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ontoggle_setterinfo }
    },
    JSPropertySpec {
        name: b"onvolumechange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvolumechange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvolumechange_setterinfo }
    },
    JSPropertySpec {
        name: b"onwaiting\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onwaiting_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onwaiting_setterinfo }
    },
    JSPropertySpec {
        name: b"ontransitionend\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ontransitionend_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ontransitionend_setterinfo }
    },
    JSPropertySpec {
        name: b"onafterprint\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onafterprint_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onafterprint_setterinfo }
    },
    JSPropertySpec {
        name: b"onbeforeprint\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onbeforeprint_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onbeforeprint_setterinfo }
    },
    JSPropertySpec {
        name: b"onbeforeunload\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onbeforeunload_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onbeforeunload_setterinfo }
    },
    JSPropertySpec {
        name: b"onhashchange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onhashchange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onhashchange_setterinfo }
    },
    JSPropertySpec {
        name: b"onlanguagechange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onlanguagechange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onlanguagechange_setterinfo }
    },
    JSPropertySpec {
        name: b"onmessage\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onmessage_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onmessage_setterinfo }
    },
    JSPropertySpec {
        name: b"onoffline\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onoffline_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onoffline_setterinfo }
    },
    JSPropertySpec {
        name: b"ononline\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &ononline_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &ononline_setterinfo }
    },
    JSPropertySpec {
        name: b"onpagehide\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onpagehide_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onpagehide_setterinfo }
    },
    JSPropertySpec {
        name: b"onpageshow\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onpageshow_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onpageshow_setterinfo }
    },
    JSPropertySpec {
        name: b"onpopstate\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onpopstate_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onpopstate_setterinfo }
    },
    JSPropertySpec {
        name: b"onrejectionhandled\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onrejectionhandled_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onrejectionhandled_setterinfo }
    },
    JSPropertySpec {
        name: b"onstorage\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onstorage_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onstorage_setterinfo }
    },
    JSPropertySpec {
        name: b"onunhandledrejection\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onunhandledrejection_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onunhandledrejection_setterinfo }
    },
    JSPropertySpec {
        name: b"onunload\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onunload_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onunload_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplayconnect\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplayconnect_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplayconnect_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplaydisconnect\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplaydisconnect_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplaydisconnect_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplayactivate\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplayactivate_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplayactivate_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplaydeactivate\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplaydeactivate_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplaydeactivate_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplayblur\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplayblur_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplayblur_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplayfocus\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplayfocus_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplayfocus_setterinfo }
    },
    JSPropertySpec {
        name: b"onvrdisplaypresentchange\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &onvrdisplaypresentchange_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &onvrdisplaypresentchange_setterinfo }
    },
    JSPropertySpec {
        name: b"localStorage\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &localStorage_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"origin\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &origin_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &origin_setterinfo }
    },
    JSPropertySpec {
        name: b"performance\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &performance_getterinfo },
        setter: JSNativeWrapper { op: Some(generic_setter), info: &performance_setterinfo }
    },
    JSPropertySpec {
        name: b"sessionStorage\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &sessionStorage_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: 0 as *const libc::c_char,
        flags: 0,
        getter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    }]

];
const sAttributes: &'static [Guard<&'static [JSPropertySpec]>] = &[
    Guard::new(Condition::Satisfied, sAttributes_specs[0]),
    Guard::new(Condition::Pref("dom.customelements.enabled"), sAttributes_specs[1]),
    Guard::new(Condition::Satisfied, sAttributes_specs[2]),
    Guard::new(Condition::Pref("dom.bluetooth.testing.enabled"), sAttributes_specs[3]),
    Guard::new(Condition::Satisfied, sAttributes_specs[4])
];
const sUnforgeableAttributes_specs: &'static [&'static[JSPropertySpec]] = &[
&[
    JSPropertySpec {
        name: b"window\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED | JSPROP_PERMANENT) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &window_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"document\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED | JSPROP_PERMANENT) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &document_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"location\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED | JSPROP_PERMANENT) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &location_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: b"top\0" as *const u8 as *const libc::c_char,
        flags: (JSPROP_ENUMERATE | JSPROP_SHARED | JSPROP_PERMANENT) as u8,
        getter: JSNativeWrapper { op: Some(generic_getter), info: &top_getterinfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    },
    JSPropertySpec {
        name: 0 as *const libc::c_char,
        flags: 0,
        getter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo },
        setter: JSNativeWrapper { op: None, info: 0 as *const JSJitInfo }
    }]

];
const sUnforgeableAttributes: &'static [Guard<&'static [JSPropertySpec]>] = &[
    Guard::new(Condition::Satisfied, sUnforgeableAttributes_specs[0])
];

pub unsafe fn GetProtoObject<TH: TypeHolderTrait>
(cx: *mut JSContext, global: HandleObject, mut rval: MutableHandleObject) {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    assert!(((*get_object_class(global.get())).flags & JSCLASS_DOM_GLOBAL) != 0);

    /* Check to see whether the interface objects are already installed */
    let proto_or_iface_array = get_proto_or_iface_array(global.get());
    rval.set((*proto_or_iface_array)[PrototypeList::ID::Window as usize]);
    if !rval.get().is_null() {
        return;
    }

    CreateInterfaceObjects(cx, global, proto_or_iface_array);
    rval.set((*proto_or_iface_array)[PrototypeList::ID::Window as usize]);
    assert!(!rval.get().is_null());

}

static PrototypeClass: JSClass = JSClass {
    name: b"WindowPrototype\0" as *const u8 as *const libc::c_char,
    flags:
        // JSCLASS_HAS_RESERVED_SLOTS(1)
        (1 & JSCLASS_RESERVED_SLOTS_MASK) << JSCLASS_RESERVED_SLOTS_SHIFT,
    cOps: 0 as *const _,
    reserved: [0 as *mut os::raw::c_void; 3]
};

static INTERFACE_OBJECT_CLASS: NonCallbackInterfaceObjectClass =
    NonCallbackInterfaceObjectClass::new(
        &InterfaceConstructorBehavior::throw(),
        b"function Window() {\n    [native code]\n}",
        PrototypeList::ID::Window,
        2);

pub unsafe fn DefineDOMInterface<TH: TypeHolderTrait>
(cx: *mut JSContext, global: HandleObject) {
    assert!(!global.get().is_null());

    if !ConstructorEnabled(cx, global) {
        return;
    }

    rooted!(in(cx) let mut proto = ptr::null_mut::<JSObject>());
    GetProtoObject(cx, global, proto.handle_mut());
    assert!(!proto.is_null());
}

unsafe fn ConstructorEnabled<TH: TypeHolderTrait>
(aCx: *mut JSContext, aObj: HandleObject) -> bool {
    is_exposed_in(aObj, InterfaceObjectMap::Globals::WINDOW)
}

unsafe fn CreateInterfaceObjects<TH: TypeHolderTrait>
(cx: *mut JSContext, global: HandleObject, cache: *mut ProtoOrIfaceArray) {
    rooted!(in(cx) let mut prototype_proto = ptr::null_mut::<JSObject>());
    EventTargetBinding::GetProtoObject(cx, global, prototype_proto.handle_mut());
    assert!(!prototype_proto.is_null());

    rooted!(in(cx) let mut prototype = ptr::null_mut::<JSObject>());
    create_interface_prototype_object(cx,
                                      prototype_proto.handle().into(),
                                      &PrototypeClass,
                                      &[],
                                      &[],
                                      &[],
                                      &[],
                                      prototype.handle_mut().into());
    assert!(!prototype.is_null());
    assert!((*cache)[PrototypeList::ID::Window as usize].is_null());
    (*cache)[PrototypeList::ID::Window as usize] = prototype.get();
    <*mut JSObject>::post_barrier((*cache).as_mut_ptr().offset(PrototypeList::ID::Window as isize),
                                  ptr::null_mut(),
                                  prototype.get());


    rooted!(in(cx) let mut interface_proto = ptr::null_mut::<JSObject>());
    EventTargetBinding::GetConstructorObject(cx, global, interface_proto.handle_mut());
    assert!(!interface_proto.is_null());

    rooted!(in(cx) let mut interface = ptr::null_mut::<JSObject>());
    create_noncallback_interface_object(cx,
                                        global.into(),
                                        interface_proto.handle(),
                                        &INTERFACE_OBJECT_CLASS,
                                        &[],
                                        &[],
                                        &[],
                                        prototype.handle(),
                                        b"Window\0",
                                        0,
                                        interface.handle_mut());
    assert!(!interface.is_null());

    rooted!(in(cx) let mut unforgeable_holder = ptr::null_mut::<JSObject>());
    unforgeable_holder.handle_mut().set(
        JS_NewObjectWithoutMetadata(cx, ptr::null(), HandleObject::null()));
    assert!(!unforgeable_holder.is_null());

    define_guarded_properties(cx, unforgeable_holder.handle(), sUnforgeableAttributes);
    JS_SetReservedSlot(prototype.get(), DOM_PROTO_UNFORGEABLE_HOLDER_SLOT,
                       ObjectValue(unforgeable_holder.get()))
}
} // mod WindowBinding


