/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

use dom;
use dom::bindings::codegen::Bindings::BlobBinding::BlobPropertyBag;
use dom::bindings::codegen::Bindings::BluetoothAdvertisingEventBinding::BluetoothAdvertisingEventInit;
use dom::bindings::codegen::Bindings::BluetoothBinding::BluetoothDataFilterInit;
use dom::bindings::codegen::Bindings::BluetoothBinding::BluetoothLEScanFilterInit;
use dom::bindings::codegen::Bindings::BluetoothBinding::RequestDeviceOptions;
use dom::bindings::codegen::Bindings::BluetoothPermissionResultBinding::BluetoothPermissionDescriptor;
use dom::bindings::codegen::Bindings::CloseEventBinding::CloseEventInit;
use dom::bindings::codegen::Bindings::CompositionEventBinding::CompositionEventInit;
use dom::bindings::codegen::Bindings::CustomElementRegistryBinding::ElementDefinitionOptions;
use dom::bindings::codegen::Bindings::CustomEventBinding::CustomEventInit;
use dom::bindings::codegen::Bindings::DOMMatrixBinding::DOMMatrixInit;
use dom::bindings::codegen::Bindings::DOMPointBinding::DOMPointInit;
use dom::bindings::codegen::Bindings::DOMQuadBinding::DOMQuadInit;
use dom::bindings::codegen::Bindings::DOMRectReadOnlyBinding::DOMRectInit;
use dom::bindings::codegen::Bindings::DocumentBinding::ElementCreationOptions;
use dom::bindings::codegen::Bindings::ErrorEventBinding::ErrorEventInit;
use dom::bindings::codegen::Bindings::EventBinding::EventInit;
use dom::bindings::codegen::Bindings::EventModifierInitBinding::EventModifierInit;
use dom::bindings::codegen::Bindings::EventSourceBinding::EventSourceInit;
use dom::bindings::codegen::Bindings::EventTargetBinding::AddEventListenerOptions;
use dom::bindings::codegen::Bindings::EventTargetBinding::EventListenerOptions;
use dom::bindings::codegen::Bindings::ExtendableEventBinding::ExtendableEventInit;
use dom::bindings::codegen::Bindings::ExtendableMessageEventBinding::ExtendableMessageEventInit;
use dom::bindings::codegen::Bindings::FileBinding::FilePropertyBag;
use dom::bindings::codegen::Bindings::FocusEventBinding::FocusEventInit;
use dom::bindings::codegen::Bindings::GamepadEventBinding::GamepadEventInit;
use dom::bindings::codegen::Bindings::HashChangeEventBinding::HashChangeEventInit;
use dom::bindings::codegen::Bindings::InputEventBinding::InputEventInit;
use dom::bindings::codegen::Bindings::IterableIteratorBinding::IterableKeyAndValueResult;
use dom::bindings::codegen::Bindings::IterableIteratorBinding::IterableKeyOrValueResult;
use dom::bindings::codegen::Bindings::KeyboardEventBinding::KeyboardEventInit;
use dom::bindings::codegen::Bindings::MediaQueryListEventBinding::MediaQueryListEventInit;
use dom::bindings::codegen::Bindings::MessageEventBinding::MessageEventInit;
use dom::bindings::codegen::Bindings::MouseEventBinding::MouseEventInit;
use dom::bindings::codegen::Bindings::MutationObserverBinding::MutationObserverInit;
use dom::bindings::codegen::Bindings::PageTransitionEventBinding::PageTransitionEventInit;
use dom::bindings::codegen::Bindings::PerformanceObserverBinding::PerformanceObserverInit;
use dom::bindings::codegen::Bindings::PermissionStatusBinding::DevicePermissionDescriptor;
use dom::bindings::codegen::Bindings::PermissionStatusBinding::MidiPermissionDescriptor;
use dom::bindings::codegen::Bindings::PermissionStatusBinding::PermissionDescriptor;
use dom::bindings::codegen::Bindings::PermissionStatusBinding::PushPermissionDescriptor;
use dom::bindings::codegen::Bindings::PopStateEventBinding::PopStateEventInit;
use dom::bindings::codegen::Bindings::ProgressEventBinding::ProgressEventInit;
use dom::bindings::codegen::Bindings::RequestBinding::RequestInit;
use dom::bindings::codegen::Bindings::ResponseBinding::ResponseInit;
use dom::bindings::codegen::Bindings::ServiceWorkerContainerBinding::RegistrationOptions;
use dom::bindings::codegen::Bindings::StorageEventBinding::StorageEventInit;
use dom::bindings::codegen::Bindings::TestBindingBinding::TestDictionary;
use dom::bindings::codegen::Bindings::TestBindingBinding::TestDictionaryDefaults;
use dom::bindings::codegen::Bindings::TextDecoderBinding::TextDecodeOptions;
use dom::bindings::codegen::Bindings::TextDecoderBinding::TextDecoderOptions;
use dom::bindings::codegen::Bindings::TransitionEventBinding::TransitionEventInit;
use dom::bindings::codegen::Bindings::UIEventBinding::UIEventInit;
use dom::bindings::codegen::Bindings::VRDisplayEventBinding::VRDisplayEventInit;
use dom::bindings::codegen::Bindings::VRLayerBinding::VRLayer;
use dom::bindings::codegen::Bindings::WebGLContextEventBinding::WebGLContextEventInit;
use dom::bindings::codegen::Bindings::WebGLRenderingContextBinding::WebGLContextAttributes;
use dom::bindings::codegen::Bindings::WindowBinding::ScrollOptions;
use dom::bindings::codegen::Bindings::WindowBinding::ScrollToOptions;
use dom::bindings::codegen::Bindings::WorkletBinding::WorkletOptions;
use dom::bindings::codegen::PrototypeList;
use dom::bindings::conversions::ConversionBehavior;
use dom::bindings::conversions::ConversionResult;
use dom::bindings::conversions::FromJSValConvertible;
use dom::bindings::conversions::StringificationBehavior;
use dom::bindings::conversions::ToJSValConvertible;
use dom::bindings::conversions::root_from_handlevalue;
use dom::bindings::error::throw_not_in_union;
use dom::bindings::mozmap::MozMap;
use dom::bindings::root::DomRoot;
use dom::bindings::str::ByteString;
use dom::bindings::str::DOMString;
use dom::bindings::str::USVString;
use dom::bindings::trace::RootedTraceableBox;
use dom::types::*;
use js::error::throw_type_error;
use js::jsapi::Heap;
use js::jsapi::JSContext;
use js::jsapi::JSObject;
use js::jsval::JSVal;
use js::rust::HandleValue;
use js::rust::MutableHandleValue;
use js::typedarray;
use std::ptr::NonNull;
use typeholder::TypeHolderTrait;

#[derive(JSTraceable)]
pub enum AddEventListenerOptionsOrBoolean {
    AddEventListenerOptions(AddEventListenerOptions),
    Boolean(bool),
}

impl ToJSValConvertible for AddEventListenerOptionsOrBoolean {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            AddEventListenerOptionsOrBoolean::AddEventListenerOptions(ref inner) => inner.to_jsval(cx, rval),
            AddEventListenerOptionsOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for AddEventListenerOptionsOrBoolean {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        match AddEventListenerOptionsOrBoolean::TryConvertToAddEventListenerOptions(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(AddEventListenerOptionsOrBoolean::AddEventListenerOptions(value))),
            Ok(None) => (),
        }


        match AddEventListenerOptionsOrBoolean::TryConvertToBoolean(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(AddEventListenerOptionsOrBoolean::Boolean(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "AddEventListenerOptions");
        Err(())
    }
}

impl AddEventListenerOptionsOrBoolean {
    unsafe fn TryConvertToAddEventListenerOptions(cx: *mut JSContext, value: HandleValue) -> Result<Option<AddEventListenerOptions>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(dictionary)) => dictionary,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum ArrayBufferOrArrayBufferView {
    ArrayBuffer(RootedTraceableBox<typedarray::HeapArrayBuffer>),
    ArrayBufferView(RootedTraceableBox<typedarray::HeapArrayBufferView>),
}

impl ToJSValConvertible for ArrayBufferOrArrayBufferView {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ArrayBufferOrArrayBufferView::ArrayBuffer(ref inner) => inner.to_jsval(cx, rval),
            ArrayBufferOrArrayBufferView::ArrayBufferView(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for ArrayBufferOrArrayBufferView {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match ArrayBufferOrArrayBufferView::TryConvertToArrayBuffer(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferOrArrayBufferView::ArrayBuffer(value))),
                Ok(None) => (),
            }
            match ArrayBufferOrArrayBufferView::TryConvertToArrayBufferView(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferOrArrayBufferView::ArrayBufferView(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "ArrayBuffer, ArrayBufferView");
        Err(())
    }
}

impl ArrayBufferOrArrayBufferView {
    unsafe fn TryConvertToArrayBuffer(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBuffer>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBuffer::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToArrayBufferView(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBufferView>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBufferView::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }
}


#[derive(JSTraceable)]
pub enum ArrayBufferOrArrayBufferViewOrBlobOrString<TH: TypeHolderTrait> {
    ArrayBuffer(RootedTraceableBox<typedarray::HeapArrayBuffer>),
    ArrayBufferView(RootedTraceableBox<typedarray::HeapArrayBufferView>),
    Blob(DomRoot<Blob<TH>>),
    String(DOMString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for ArrayBufferOrArrayBufferViewOrBlobOrString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ArrayBufferOrArrayBufferViewOrBlobOrString::ArrayBuffer(ref inner) => inner.to_jsval(cx, rval),
            ArrayBufferOrArrayBufferViewOrBlobOrString::ArrayBufferView(ref inner) => inner.to_jsval(cx, rval),
            ArrayBufferOrArrayBufferViewOrBlobOrString::Blob(ref inner) => inner.to_jsval(cx, rval),
            ArrayBufferOrArrayBufferViewOrBlobOrString::String(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for ArrayBufferOrArrayBufferViewOrBlobOrString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match ArrayBufferOrArrayBufferViewOrBlobOrString::<TH>::TryConvertToArrayBuffer(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferOrArrayBufferViewOrBlobOrString::ArrayBuffer(value))),
                Ok(None) => (),
            }
            match ArrayBufferOrArrayBufferViewOrBlobOrString::<TH>::TryConvertToArrayBufferView(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferOrArrayBufferViewOrBlobOrString::ArrayBufferView(value))),
                Ok(None) => (),
            }
            match ArrayBufferOrArrayBufferViewOrBlobOrString::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferOrArrayBufferViewOrBlobOrString::Blob(value))),
                Ok(None) => (),
            }

        }

        match ArrayBufferOrArrayBufferViewOrBlobOrString::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferOrArrayBufferViewOrBlobOrString::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "ArrayBuffer, ArrayBufferView, Blob");
        Err(())
    }
}

impl<TH: TypeHolderTrait> ArrayBufferOrArrayBufferViewOrBlobOrString<TH> {
    unsafe fn TryConvertToArrayBuffer(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBuffer>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBuffer::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToArrayBufferView(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBufferView>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBufferView::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum ArrayBufferViewOrArrayBuffer {
    ArrayBufferView(RootedTraceableBox<typedarray::HeapArrayBufferView>),
    ArrayBuffer(RootedTraceableBox<typedarray::HeapArrayBuffer>),
}

impl ToJSValConvertible for ArrayBufferViewOrArrayBuffer {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ArrayBufferViewOrArrayBuffer::ArrayBufferView(ref inner) => inner.to_jsval(cx, rval),
            ArrayBufferViewOrArrayBuffer::ArrayBuffer(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for ArrayBufferViewOrArrayBuffer {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match ArrayBufferViewOrArrayBuffer::TryConvertToArrayBufferView(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferViewOrArrayBuffer::ArrayBufferView(value))),
                Ok(None) => (),
            }
            match ArrayBufferViewOrArrayBuffer::TryConvertToArrayBuffer(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ArrayBufferViewOrArrayBuffer::ArrayBuffer(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "ArrayBufferView, ArrayBuffer");
        Err(())
    }
}

impl ArrayBufferViewOrArrayBuffer {
    unsafe fn TryConvertToArrayBufferView(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBufferView>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBufferView::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToArrayBuffer(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBuffer>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBuffer::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }
}


#[derive(JSTraceable)]
pub enum BlobOrBlobSequence<TH: TypeHolderTrait + 'static> {
    Blob(DomRoot<Blob<TH>>),
    BlobSequence(Vec<DomRoot<Blob<TH>>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for BlobOrBlobSequence<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            BlobOrBlobSequence::Blob(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBlobSequence::BlobSequence(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for BlobOrBlobSequence<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match BlobOrBlobSequence::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBlobSequence::Blob(value))),
                Ok(None) => (),
            }

            match BlobOrBlobSequence::TryConvertToBlobSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBlobSequence::BlobSequence(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "Blob, BlobSequence");
        Err(())
    }
}

impl<TH: TypeHolderTrait> BlobOrBlobSequence<TH> {
    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToBlobSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<DomRoot<Blob<TH>>>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum BlobOrBoolean<TH: TypeHolderTrait + 'static> {
    Blob(DomRoot<Blob<TH>>),
    Boolean(bool),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for BlobOrBoolean<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            BlobOrBoolean::Blob(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for BlobOrBoolean<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match BlobOrBoolean::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBoolean::Blob(value))),
                Ok(None) => (),
            }

        }

        match BlobOrBoolean::<TH>::TryConvertToBoolean(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBoolean::Boolean(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Blob");
        Err(())
    }
}

impl<TH: TypeHolderTrait> BlobOrBoolean<TH> {
    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams<TH: TypeHolderTrait> {
    Blob(DomRoot<Blob<TH>>),
    ArrayBufferView(RootedTraceableBox<typedarray::HeapArrayBufferView>),
    ArrayBuffer(RootedTraceableBox<typedarray::HeapArrayBuffer>),
    FormData(DomRoot<FormData<TH>>),
    String(DOMString),
    URLSearchParams(DomRoot<URLSearchParams<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::Blob(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::ArrayBufferView(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::ArrayBuffer(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::FormData(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::String(ref inner) => inner.to_jsval(cx, rval),
            BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::URLSearchParams(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::Blob(value))),
                Ok(None) => (),
            }
            match BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::<TH>::TryConvertToArrayBufferView(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::ArrayBufferView(value))),
                Ok(None) => (),
            }
            match BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::<TH>::TryConvertToArrayBuffer(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::ArrayBuffer(value))),
                Ok(None) => (),
            }
            match BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::<TH>::TryConvertToFormData(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::FormData(value))),
                Ok(None) => (),
            }
            match BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::<TH>::TryConvertToURLSearchParams(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::URLSearchParams(value))),
                Ok(None) => (),
            }

        }

        match BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Blob, ArrayBufferView, ArrayBuffer, FormData, URLSearchParams");
        Err(())
    }
}

impl<TH: TypeHolderTrait> BlobOrBufferSourceOrFormDataOrStringOrURLSearchParams<TH> {
    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToArrayBufferView(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBufferView>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBufferView::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToArrayBuffer(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBuffer>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBuffer::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToFormData(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<FormData<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToURLSearchParams(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<URLSearchParams<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum BlobOrString<TH: TypeHolderTrait + 'static> {
    Blob(DomRoot<Blob<TH>>),
    String(DOMString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for BlobOrString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            BlobOrString::Blob(ref inner) => inner.to_jsval(cx, rval),
            BlobOrString::String(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for BlobOrString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match BlobOrString::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrString::Blob(value))),
                Ok(None) => (),
            }

        }

        match BlobOrString::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrString::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Blob");
        Err(())
    }
}

impl<TH: TypeHolderTrait> BlobOrString<TH> {
    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum BlobOrUnsignedLong<TH: TypeHolderTrait + 'static> {
    Blob(DomRoot<Blob<TH>>),
    UnsignedLong(u32),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for BlobOrUnsignedLong<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            BlobOrUnsignedLong::Blob(ref inner) => inner.to_jsval(cx, rval),
            BlobOrUnsignedLong::UnsignedLong(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for BlobOrUnsignedLong<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match BlobOrUnsignedLong::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrUnsignedLong::Blob(value))),
                Ok(None) => (),
            }

        }

        match BlobOrUnsignedLong::<TH>::TryConvertToUnsignedLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(BlobOrUnsignedLong::UnsignedLong(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Blob");
        Err(())
    }
}

impl<TH: TypeHolderTrait> BlobOrUnsignedLong<TH> {
    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToUnsignedLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<u32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum ByteStringOrLong {
    ByteString(ByteString),
    Long(i32),
}

impl ToJSValConvertible for ByteStringOrLong {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ByteStringOrLong::ByteString(ref inner) => inner.to_jsval(cx, rval),
            ByteStringOrLong::Long(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for ByteStringOrLong {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_number() {
            match ByteStringOrLong::TryConvertToLong(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringOrLong::Long(value))),
                Ok(None) => (),
            }

        }

        match ByteStringOrLong::TryConvertToByteString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringOrLong::ByteString(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "");
        Err(())
    }
}

impl ByteStringOrLong {
    unsafe fn TryConvertToByteString(cx: *mut JSContext, value: HandleValue) -> Result<Option<ByteString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum ByteStringSequenceOrLong {
    ByteStringSequence(Vec<ByteString>),
    Long(i32),
}

impl ToJSValConvertible for ByteStringSequenceOrLong {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ByteStringSequenceOrLong::ByteStringSequence(ref inner) => inner.to_jsval(cx, rval),
            ByteStringSequenceOrLong::Long(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for ByteStringSequenceOrLong {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match ByteStringSequenceOrLong::TryConvertToByteStringSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringSequenceOrLong::ByteStringSequence(value))),
                Ok(None) => (),
            }

        }

        match ByteStringSequenceOrLong::TryConvertToLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringSequenceOrLong::Long(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "ByteStringSequence");
        Err(())
    }
}

impl ByteStringSequenceOrLong {
    unsafe fn TryConvertToByteStringSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<ByteString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum ByteStringSequenceOrLongOrString {
    ByteStringSequence(Vec<ByteString>),
    Long(i32),
    String(DOMString),
}

impl ToJSValConvertible for ByteStringSequenceOrLongOrString {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ByteStringSequenceOrLongOrString::ByteStringSequence(ref inner) => inner.to_jsval(cx, rval),
            ByteStringSequenceOrLongOrString::Long(ref inner) => inner.to_jsval(cx, rval),
            ByteStringSequenceOrLongOrString::String(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for ByteStringSequenceOrLongOrString {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match ByteStringSequenceOrLongOrString::TryConvertToByteStringSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringSequenceOrLongOrString::ByteStringSequence(value))),
                Ok(None) => (),
            }

        }

        if value.get().is_number() {
            match ByteStringSequenceOrLongOrString::TryConvertToLong(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringSequenceOrLongOrString::Long(value))),
                Ok(None) => (),
            }

        }

        match ByteStringSequenceOrLongOrString::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(ByteStringSequenceOrLongOrString::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "ByteStringSequence");
        Err(())
    }
}

impl ByteStringSequenceOrLongOrString {
    unsafe fn TryConvertToByteStringSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<ByteString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext<TH: TypeHolderTrait + 'static> {
    CanvasRenderingContext2D(DomRoot<CanvasRenderingContext2D<TH>>),
    WebGLRenderingContext(DomRoot<WebGLRenderingContext<TH>>),
    WebGL2RenderingContext(DomRoot<WebGL2RenderingContext<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::CanvasRenderingContext2D(ref inner) => inner.to_jsval(cx, rval),
            CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::WebGLRenderingContext(ref inner) => inner.to_jsval(cx, rval),
            CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::WebGL2RenderingContext(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::TryConvertToCanvasRenderingContext2D(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::CanvasRenderingContext2D(value))),
                Ok(None) => (),
            }
            match CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::TryConvertToWebGLRenderingContext(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::WebGLRenderingContext(value))),
                Ok(None) => (),
            }
            match CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::TryConvertToWebGL2RenderingContext(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext::WebGL2RenderingContext(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "CanvasRenderingContext2D, WebGLRenderingContext, WebGL2RenderingContext");
        Err(())
    }
}

impl<TH: TypeHolderTrait> CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContext<TH> {
    unsafe fn TryConvertToCanvasRenderingContext2D(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<CanvasRenderingContext2D<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToWebGLRenderingContext(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<WebGLRenderingContext<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToWebGL2RenderingContext(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<WebGL2RenderingContext<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum DocumentOrBodyInit<TH: TypeHolderTrait> {
    Document(DomRoot<Document<TH>>),
    Blob(DomRoot<Blob<TH>>),
    ArrayBufferView(RootedTraceableBox<typedarray::HeapArrayBufferView>),
    ArrayBuffer(RootedTraceableBox<typedarray::HeapArrayBuffer>),
    FormData(DomRoot<FormData<TH>>),
    String(DOMString),
    URLSearchParams(DomRoot<URLSearchParams<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for DocumentOrBodyInit<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            DocumentOrBodyInit::Document(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrBodyInit::Blob(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrBodyInit::ArrayBufferView(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrBodyInit::ArrayBuffer(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrBodyInit::FormData(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrBodyInit::String(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrBodyInit::URLSearchParams(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for DocumentOrBodyInit<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match DocumentOrBodyInit::<TH>::TryConvertToDocument(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::Document(value))),
                Ok(None) => (),
            }
            match DocumentOrBodyInit::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::Blob(value))),
                Ok(None) => (),
            }
            match DocumentOrBodyInit::<TH>::TryConvertToArrayBufferView(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::ArrayBufferView(value))),
                Ok(None) => (),
            }
            match DocumentOrBodyInit::<TH>::TryConvertToArrayBuffer(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::ArrayBuffer(value))),
                Ok(None) => (),
            }
            match DocumentOrBodyInit::<TH>::TryConvertToFormData(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::FormData(value))),
                Ok(None) => (),
            }
            match DocumentOrBodyInit::<TH>::TryConvertToURLSearchParams(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::URLSearchParams(value))),
                Ok(None) => (),
            }

        }

        match DocumentOrBodyInit::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrBodyInit::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Document, Blob, ArrayBufferView, ArrayBuffer, FormData, URLSearchParams");
        Err(())
    }
}

impl<TH: TypeHolderTrait> DocumentOrBodyInit<TH> {
    unsafe fn TryConvertToDocument(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Document<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToArrayBufferView(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBufferView>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBufferView::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToArrayBuffer(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapArrayBuffer>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapArrayBuffer::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToFormData(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<FormData<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToURLSearchParams(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<URLSearchParams<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum DocumentOrTestTypedef<TH: TypeHolderTrait + 'static> {
    Document(DomRoot<Document<TH>>),
    String(DOMString),
    URL(DomRoot<URL<TH>>),
    Blob(DomRoot<Blob<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for DocumentOrTestTypedef<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            DocumentOrTestTypedef::Document(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrTestTypedef::String(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrTestTypedef::URL(ref inner) => inner.to_jsval(cx, rval),
            DocumentOrTestTypedef::Blob(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for DocumentOrTestTypedef<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match DocumentOrTestTypedef::TryConvertToDocument(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrTestTypedef::Document(value))),
                Ok(None) => (),
            }
            match DocumentOrTestTypedef::TryConvertToURL(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrTestTypedef::URL(value))),
                Ok(None) => (),
            }
            match DocumentOrTestTypedef::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrTestTypedef::Blob(value))),
                Ok(None) => (),
            }

        }

        match DocumentOrTestTypedef::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(DocumentOrTestTypedef::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Document, URL, Blob");
        Err(())
    }
}

impl<TH: TypeHolderTrait> DocumentOrTestTypedef<TH> {
    unsafe fn TryConvertToDocument(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Document<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToURL(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<URL<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum EventListenerOptionsOrBoolean {
    EventListenerOptions(EventListenerOptions),
    Boolean(bool),
}

impl ToJSValConvertible for EventListenerOptionsOrBoolean {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            EventListenerOptionsOrBoolean::EventListenerOptions(ref inner) => inner.to_jsval(cx, rval),
            EventListenerOptionsOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for EventListenerOptionsOrBoolean {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        match EventListenerOptionsOrBoolean::TryConvertToEventListenerOptions(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(EventListenerOptionsOrBoolean::EventListenerOptions(value))),
            Ok(None) => (),
        }


        match EventListenerOptionsOrBoolean::TryConvertToBoolean(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(EventListenerOptionsOrBoolean::Boolean(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "EventListenerOptions");
        Err(())
    }
}

impl EventListenerOptionsOrBoolean {
    unsafe fn TryConvertToEventListenerOptions(cx: *mut JSContext, value: HandleValue) -> Result<Option<EventListenerOptions>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(dictionary)) => dictionary,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum EventOrString<TH: TypeHolderTrait + 'static> {
    Event(DomRoot<Event<TH>>),
    String(DOMString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for EventOrString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            EventOrString::Event(ref inner) => inner.to_jsval(cx, rval),
            EventOrString::String(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for EventOrString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match EventOrString::TryConvertToEvent(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(EventOrString::Event(value))),
                Ok(None) => (),
            }

        }

        match EventOrString::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(EventOrString::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Event");
        Err(())
    }
}

impl<TH: TypeHolderTrait> EventOrString<TH> {
    unsafe fn TryConvertToEvent(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Event<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum EventOrUSVString<TH: TypeHolderTrait + 'static> {
    Event(DomRoot<Event<TH>>),
    USVString(USVString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for EventOrUSVString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            EventOrUSVString::Event(ref inner) => inner.to_jsval(cx, rval),
            EventOrUSVString::USVString(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for EventOrUSVString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match EventOrUSVString::TryConvertToEvent(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(EventOrUSVString::Event(value))),
                Ok(None) => (),
            }

        }

        match EventOrUSVString::<TH>::TryConvertToUSVString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(EventOrUSVString::USVString(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Event");
        Err(())
    }
}

impl<TH: TypeHolderTrait> EventOrUSVString<TH> {
    unsafe fn TryConvertToEvent(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Event<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToUSVString(cx: *mut JSContext, value: HandleValue) -> Result<Option<USVString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum FileOrUSVString<TH: TypeHolderTrait + 'static> {
    File(DomRoot<File<TH>>),
    USVString(USVString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for FileOrUSVString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            FileOrUSVString::File(ref inner) => inner.to_jsval(cx, rval),
            FileOrUSVString::USVString(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for FileOrUSVString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match FileOrUSVString::TryConvertToFile(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(FileOrUSVString::File(value))),
                Ok(None) => (),
            }

        }

        match FileOrUSVString::<TH>::TryConvertToUSVString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(FileOrUSVString::USVString(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "File");
        Err(())
    }
}

impl<TH: TypeHolderTrait> FileOrUSVString<TH> {
    unsafe fn TryConvertToFile(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<File<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToUSVString(cx: *mut JSContext, value: HandleValue) -> Result<Option<USVString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum Float32ArrayOrUnrestrictedFloatSequence {
    Float32Array(RootedTraceableBox<typedarray::HeapFloat32Array>),
    UnrestrictedFloatSequence(Vec<f32>),
}

impl ToJSValConvertible for Float32ArrayOrUnrestrictedFloatSequence {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            Float32ArrayOrUnrestrictedFloatSequence::Float32Array(ref inner) => inner.to_jsval(cx, rval),
            Float32ArrayOrUnrestrictedFloatSequence::UnrestrictedFloatSequence(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for Float32ArrayOrUnrestrictedFloatSequence {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match Float32ArrayOrUnrestrictedFloatSequence::TryConvertToFloat32Array(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(Float32ArrayOrUnrestrictedFloatSequence::Float32Array(value))),
                Ok(None) => (),
            }

            match Float32ArrayOrUnrestrictedFloatSequence::TryConvertToUnrestrictedFloatSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(Float32ArrayOrUnrestrictedFloatSequence::UnrestrictedFloatSequence(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "Float32Array, UnrestrictedFloatSequence");
        Err(())
    }
}

impl Float32ArrayOrUnrestrictedFloatSequence {
    unsafe fn TryConvertToFloat32Array(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapFloat32Array>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapFloat32Array::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToUnrestrictedFloatSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<f32>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum HTMLElementOrLong<TH: TypeHolderTrait + 'static> {
    HTMLElement(DomRoot<HTMLElement<TH>>),
    Long(i32),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for HTMLElementOrLong<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            HTMLElementOrLong::HTMLElement(ref inner) => inner.to_jsval(cx, rval),
            HTMLElementOrLong::Long(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for HTMLElementOrLong<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match HTMLElementOrLong::TryConvertToHTMLElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLElementOrLong::HTMLElement(value))),
                Ok(None) => (),
            }

        }

        match HTMLElementOrLong::<TH>::TryConvertToLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLElementOrLong::Long(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "HTMLElement");
        Err(())
    }
}

impl<TH: TypeHolderTrait> HTMLElementOrLong<TH> {
    unsafe fn TryConvertToHTMLElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum HTMLElementOrUnsignedLongOrStringOrBoolean<TH: TypeHolderTrait + 'static> {
    HTMLElement(DomRoot<HTMLElement<TH>>),
    UnsignedLong(u32),
    String(DOMString),
    Boolean(bool),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for HTMLElementOrUnsignedLongOrStringOrBoolean<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            HTMLElementOrUnsignedLongOrStringOrBoolean::HTMLElement(ref inner) => inner.to_jsval(cx, rval),
            HTMLElementOrUnsignedLongOrStringOrBoolean::UnsignedLong(ref inner) => inner.to_jsval(cx, rval),
            HTMLElementOrUnsignedLongOrStringOrBoolean::String(ref inner) => inner.to_jsval(cx, rval),
            HTMLElementOrUnsignedLongOrStringOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for HTMLElementOrUnsignedLongOrStringOrBoolean<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match HTMLElementOrUnsignedLongOrStringOrBoolean::<TH>::TryConvertToHTMLElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLElementOrUnsignedLongOrStringOrBoolean::HTMLElement(value))),
                Ok(None) => (),
            }

        }

        if value.get().is_boolean() {
            match HTMLElementOrUnsignedLongOrStringOrBoolean::<TH>::TryConvertToBoolean(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLElementOrUnsignedLongOrStringOrBoolean::Boolean(value))),
                Ok(None) => (),
            }

        }

        if value.get().is_number() {
            match HTMLElementOrUnsignedLongOrStringOrBoolean::<TH>::TryConvertToUnsignedLong(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLElementOrUnsignedLongOrStringOrBoolean::UnsignedLong(value))),
                Ok(None) => (),
            }

        }

        match HTMLElementOrUnsignedLongOrStringOrBoolean::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLElementOrUnsignedLongOrStringOrBoolean::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "HTMLElement");
        Err(())
    }
}

impl<TH: TypeHolderTrait> HTMLElementOrUnsignedLongOrStringOrBoolean<TH> {
    unsafe fn TryConvertToHTMLElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToUnsignedLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<u32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue<TH: TypeHolderTrait + 'static> {
    HTMLImageElement(DomRoot<HTMLImageElement<TH>>),
    HTMLCanvasElement(DomRoot<HTMLCanvasElement<TH>>),
    CanvasRenderingContext2D(DomRoot<CanvasRenderingContext2D<TH>>),
    CSSStyleValue(DomRoot<CSSStyleValue<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::HTMLImageElement(ref inner) => inner.to_jsval(cx, rval),
            HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::HTMLCanvasElement(ref inner) => inner.to_jsval(cx, rval),
            HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::CanvasRenderingContext2D(ref inner) => inner.to_jsval(cx, rval),
            HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::CSSStyleValue(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::TryConvertToHTMLImageElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::HTMLImageElement(value))),
                Ok(None) => (),
            }
            match HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::TryConvertToHTMLCanvasElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::HTMLCanvasElement(value))),
                Ok(None) => (),
            }
            match HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::TryConvertToCanvasRenderingContext2D(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::CanvasRenderingContext2D(value))),
                Ok(None) => (),
            }
            match HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::TryConvertToCSSStyleValue(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue::CSSStyleValue(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "HTMLImageElement, HTMLCanvasElement, CanvasRenderingContext2D, CSSStyleValue");
        Err(())
    }
}

impl<TH: TypeHolderTrait> HTMLImageElementOrHTMLCanvasElementOrCanvasRenderingContext2DOrCSSStyleValue<TH> {
    unsafe fn TryConvertToHTMLImageElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLImageElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToHTMLCanvasElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLCanvasElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToCanvasRenderingContext2D(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<CanvasRenderingContext2D<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToCSSStyleValue(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<CSSStyleValue<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum HTMLOptionElementOrHTMLOptGroupElement<TH: TypeHolderTrait + 'static> {
    HTMLOptionElement(DomRoot<HTMLOptionElement<TH>>),
    HTMLOptGroupElement(DomRoot<HTMLOptGroupElement<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for HTMLOptionElementOrHTMLOptGroupElement<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            HTMLOptionElementOrHTMLOptGroupElement::HTMLOptionElement(ref inner) => inner.to_jsval(cx, rval),
            HTMLOptionElementOrHTMLOptGroupElement::HTMLOptGroupElement(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for HTMLOptionElementOrHTMLOptGroupElement<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match HTMLOptionElementOrHTMLOptGroupElement::TryConvertToHTMLOptionElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLOptionElementOrHTMLOptGroupElement::HTMLOptionElement(value))),
                Ok(None) => (),
            }
            match HTMLOptionElementOrHTMLOptGroupElement::TryConvertToHTMLOptGroupElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HTMLOptionElementOrHTMLOptGroupElement::HTMLOptGroupElement(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "HTMLOptionElement, HTMLOptGroupElement");
        Err(())
    }
}

impl<TH: TypeHolderTrait> HTMLOptionElementOrHTMLOptGroupElement<TH> {
    unsafe fn TryConvertToHTMLOptionElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLOptionElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToHTMLOptGroupElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLOptGroupElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum HeadersOrByteStringSequenceSequenceOrStringByteStringRecord<TH: TypeHolderTrait + 'static> {
    Headers(DomRoot<Headers<TH>>),
    ByteStringSequenceSequence(Vec<Vec<ByteString>>),
    StringByteStringRecord(MozMap<ByteString>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for HeadersOrByteStringSequenceSequenceOrStringByteStringRecord<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::Headers(ref inner) => inner.to_jsval(cx, rval),
            HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::ByteStringSequenceSequence(ref inner) => inner.to_jsval(cx, rval),
            HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::StringByteStringRecord(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for HeadersOrByteStringSequenceSequenceOrStringByteStringRecord<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::<TH>::TryConvertToHeaders(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::Headers(value))),
                Ok(None) => (),
            }

            match HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::<TH>::TryConvertToByteStringSequenceSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::ByteStringSequenceSequence(value))),
                Ok(None) => (),
            }

            match HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::<TH>::TryConvertToStringByteStringRecord(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(HeadersOrByteStringSequenceSequenceOrStringByteStringRecord::StringByteStringRecord(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "Headers, ByteStringSequenceSequence, StringByteStringRecord");
        Err(())
    }
}

impl<TH: TypeHolderTrait> HeadersOrByteStringSequenceSequenceOrStringByteStringRecord<TH> {
    unsafe fn TryConvertToHeaders(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Headers<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToByteStringSequenceSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<Vec<ByteString>>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToStringByteStringRecord(cx: *mut JSContext, value: HandleValue) -> Result<Option<MozMap<ByteString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement<TH: TypeHolderTrait + 'static> {
    ImageData(DomRoot<ImageData<TH>>),
    HTMLImageElement(DomRoot<HTMLImageElement<TH>>),
    HTMLCanvasElement(DomRoot<HTMLCanvasElement<TH>>),
    HTMLVideoElement(DomRoot<HTMLVideoElement<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::ImageData(ref inner) => inner.to_jsval(cx, rval),
            ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::HTMLImageElement(ref inner) => inner.to_jsval(cx, rval),
            ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::HTMLCanvasElement(ref inner) => inner.to_jsval(cx, rval),
            ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::HTMLVideoElement(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::TryConvertToImageData(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::ImageData(value))),
                Ok(None) => (),
            }
            match ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::TryConvertToHTMLImageElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::HTMLImageElement(value))),
                Ok(None) => (),
            }
            match ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::TryConvertToHTMLCanvasElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::HTMLCanvasElement(value))),
                Ok(None) => (),
            }
            match ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::TryConvertToHTMLVideoElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement::HTMLVideoElement(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement");
        Err(())
    }
}

impl<TH: TypeHolderTrait> ImageDataOrHTMLImageElementOrHTMLCanvasElementOrHTMLVideoElement<TH> {
    unsafe fn TryConvertToImageData(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<ImageData<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToHTMLImageElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLImageElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToHTMLCanvasElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLCanvasElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToHTMLVideoElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<HTMLVideoElement<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum Int32ArrayOrLongSequence {
    Int32Array(RootedTraceableBox<typedarray::HeapInt32Array>),
    LongSequence(Vec<i32>),
}

impl ToJSValConvertible for Int32ArrayOrLongSequence {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            Int32ArrayOrLongSequence::Int32Array(ref inner) => inner.to_jsval(cx, rval),
            Int32ArrayOrLongSequence::LongSequence(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for Int32ArrayOrLongSequence {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match Int32ArrayOrLongSequence::TryConvertToInt32Array(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(Int32ArrayOrLongSequence::Int32Array(value))),
                Ok(None) => (),
            }

            match Int32ArrayOrLongSequence::TryConvertToLongSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(Int32ArrayOrLongSequence::LongSequence(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "Int32Array, LongSequence");
        Err(())
    }
}

impl Int32ArrayOrLongSequence {
    unsafe fn TryConvertToInt32Array(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<typedarray::HeapInt32Array>>, ()> {
        Ok(Some(RootedTraceableBox::new(match typedarray::HeapInt32Array::from(value.get().to_object()) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        )))
    }

    unsafe fn TryConvertToLongSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<i32>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum LongOrLongSequenceSequence {
    Long(i32),
    LongSequenceSequence(Vec<Vec<i32>>),
}

impl ToJSValConvertible for LongOrLongSequenceSequence {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            LongOrLongSequenceSequence::Long(ref inner) => inner.to_jsval(cx, rval),
            LongOrLongSequenceSequence::LongSequenceSequence(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for LongOrLongSequenceSequence {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match LongOrLongSequenceSequence::TryConvertToLongSequenceSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(LongOrLongSequenceSequence::LongSequenceSequence(value))),
                Ok(None) => (),
            }

        }

        match LongOrLongSequenceSequence::TryConvertToLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(LongOrLongSequenceSequence::Long(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "LongSequenceSequence");
        Err(())
    }
}

impl LongOrLongSequenceSequence {
    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }

    unsafe fn TryConvertToLongSequenceSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<Vec<i32>>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum LongOrStringByteStringRecord {
    Long(i32),
    StringByteStringRecord(MozMap<ByteString>),
}

impl ToJSValConvertible for LongOrStringByteStringRecord {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            LongOrStringByteStringRecord::Long(ref inner) => inner.to_jsval(cx, rval),
            LongOrStringByteStringRecord::StringByteStringRecord(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for LongOrStringByteStringRecord {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match LongOrStringByteStringRecord::TryConvertToStringByteStringRecord(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(LongOrStringByteStringRecord::StringByteStringRecord(value))),
                Ok(None) => (),
            }

        }

        match LongOrStringByteStringRecord::TryConvertToLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(LongOrStringByteStringRecord::Long(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "StringByteStringRecord");
        Err(())
    }
}

impl LongOrStringByteStringRecord {
    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }

    unsafe fn TryConvertToStringByteStringRecord(cx: *mut JSContext, value: HandleValue) -> Result<Option<MozMap<ByteString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum LongSequenceOrBoolean {
    LongSequence(Vec<i32>),
    Boolean(bool),
}

impl ToJSValConvertible for LongSequenceOrBoolean {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            LongSequenceOrBoolean::LongSequence(ref inner) => inner.to_jsval(cx, rval),
            LongSequenceOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for LongSequenceOrBoolean {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match LongSequenceOrBoolean::TryConvertToLongSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(LongSequenceOrBoolean::LongSequence(value))),
                Ok(None) => (),
            }

        }

        match LongSequenceOrBoolean::TryConvertToBoolean(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(LongSequenceOrBoolean::Boolean(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "LongSequence");
        Err(())
    }
}

impl LongSequenceOrBoolean {
    unsafe fn TryConvertToLongSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<i32>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum LongSequenceOrTestTypedef<TH: TypeHolderTrait + 'static> {
    LongSequence(Vec<i32>),
    String(DOMString),
    URL(DomRoot<URL<TH>>),
    Blob(DomRoot<Blob<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for LongSequenceOrTestTypedef<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            LongSequenceOrTestTypedef::LongSequence(ref inner) => inner.to_jsval(cx, rval),
            LongSequenceOrTestTypedef::String(ref inner) => inner.to_jsval(cx, rval),
            LongSequenceOrTestTypedef::URL(ref inner) => inner.to_jsval(cx, rval),
            LongSequenceOrTestTypedef::Blob(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for LongSequenceOrTestTypedef<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match LongSequenceOrTestTypedef::<TH>::TryConvertToURL(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(LongSequenceOrTestTypedef::URL(value))),
                Ok(None) => (),
            }
            match LongSequenceOrTestTypedef::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(LongSequenceOrTestTypedef::Blob(value))),
                Ok(None) => (),
            }

            match LongSequenceOrTestTypedef::<TH>::TryConvertToLongSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(LongSequenceOrTestTypedef::LongSequence(value))),
                Ok(None) => (),
            }

        }

        match LongSequenceOrTestTypedef::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(LongSequenceOrTestTypedef::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "URL, Blob, LongSequence");
        Err(())
    }
}

impl<TH: TypeHolderTrait> LongSequenceOrTestTypedef<TH> {
    unsafe fn TryConvertToLongSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<i32>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToURL(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<URL<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum NodeOrString<TH: TypeHolderTrait + 'static> {
    Node(DomRoot<Node<TH>>),
    String(DOMString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for NodeOrString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            NodeOrString::Node(ref inner) => inner.to_jsval(cx, rval),
            NodeOrString::String(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for NodeOrString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match NodeOrString::<TH>::TryConvertToNode(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(NodeOrString::Node(value))),
                Ok(None) => (),
            }

        }

        match NodeOrString::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(NodeOrString::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Node");
        Err(())
    }
}

impl<TH: TypeHolderTrait> NodeOrString<TH> {
    unsafe fn TryConvertToNode(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Node<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum RadioNodeListOrElement<TH: TypeHolderTrait + 'static> {
    RadioNodeList(DomRoot<RadioNodeList<TH>>),
    Element(DomRoot<Element<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for RadioNodeListOrElement<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            RadioNodeListOrElement::RadioNodeList(ref inner) => inner.to_jsval(cx, rval),
            RadioNodeListOrElement::Element(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for RadioNodeListOrElement<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match RadioNodeListOrElement::TryConvertToRadioNodeList(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(RadioNodeListOrElement::RadioNodeList(value))),
                Ok(None) => (),
            }
            match RadioNodeListOrElement::TryConvertToElement(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(RadioNodeListOrElement::Element(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "RadioNodeList, Element");
        Err(())
    }
}

impl<TH: TypeHolderTrait> RadioNodeListOrElement<TH> {
    unsafe fn TryConvertToRadioNodeList(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<RadioNodeList<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToElement(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Element<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum RequestOrUSVString<TH: TypeHolderTrait + 'static> {
    Request(DomRoot<Request<TH>>),
    USVString(USVString),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for RequestOrUSVString<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            RequestOrUSVString::Request(ref inner) => inner.to_jsval(cx, rval),
            RequestOrUSVString::USVString(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for RequestOrUSVString<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match RequestOrUSVString::<TH>::TryConvertToRequest(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(RequestOrUSVString::Request(value))),
                Ok(None) => (),
            }

        }

        match RequestOrUSVString::<TH>::TryConvertToUSVString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(RequestOrUSVString::USVString(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Request");
        Err(())
    }
}

impl<TH: TypeHolderTrait> RequestOrUSVString<TH> {
    unsafe fn TryConvertToRequest(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Request<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToUSVString(cx: *mut JSContext, value: HandleValue) -> Result<Option<USVString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum StringOrBoolean {
    String(DOMString),
    Boolean(bool),
}

impl ToJSValConvertible for StringOrBoolean {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrBoolean::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for StringOrBoolean {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_boolean() {
            match StringOrBoolean::TryConvertToBoolean(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrBoolean::Boolean(value))),
                Ok(None) => (),
            }

        }

        match StringOrBoolean::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrBoolean::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "");
        Err(())
    }
}

impl StringOrBoolean {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum StringOrCanvasGradientOrCanvasPattern<TH: TypeHolderTrait + 'static> {
    String(DOMString),
    CanvasGradient(DomRoot<CanvasGradient<TH>>),
    CanvasPattern(DomRoot<CanvasPattern<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for StringOrCanvasGradientOrCanvasPattern<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrCanvasGradientOrCanvasPattern::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrCanvasGradientOrCanvasPattern::CanvasGradient(ref inner) => inner.to_jsval(cx, rval),
            StringOrCanvasGradientOrCanvasPattern::CanvasPattern(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for StringOrCanvasGradientOrCanvasPattern<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match StringOrCanvasGradientOrCanvasPattern::<TH>::TryConvertToCanvasGradient(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrCanvasGradientOrCanvasPattern::CanvasGradient(value))),
                Ok(None) => (),
            }
            match StringOrCanvasGradientOrCanvasPattern::<TH>::TryConvertToCanvasPattern(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrCanvasGradientOrCanvasPattern::CanvasPattern(value))),
                Ok(None) => (),
            }

        }

        match StringOrCanvasGradientOrCanvasPattern::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrCanvasGradientOrCanvasPattern::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "CanvasGradient, CanvasPattern");
        Err(())
    }
}

impl<TH: TypeHolderTrait> StringOrCanvasGradientOrCanvasPattern<TH> {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToCanvasGradient(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<CanvasGradient<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToCanvasPattern(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<CanvasPattern<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum StringOrLongSequence {
    String(DOMString),
    LongSequence(Vec<i32>),
}

impl ToJSValConvertible for StringOrLongSequence {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrLongSequence::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrLongSequence::LongSequence(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for StringOrLongSequence {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match StringOrLongSequence::TryConvertToLongSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrLongSequence::LongSequence(value))),
                Ok(None) => (),
            }

        }

        match StringOrLongSequence::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrLongSequence::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "LongSequence");
        Err(())
    }
}

impl StringOrLongSequence {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToLongSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<i32>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum StringOrObject {
    String(DOMString),
    Object(RootedTraceableBox<Heap<*mut JSObject>>),
}

impl ToJSValConvertible for StringOrObject {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrObject::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrObject::Object(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for StringOrObject {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match StringOrObject::TryConvertToObject(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrObject::Object(value))),
                Ok(None) => (),
            }

        }

        match StringOrObject::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrObject::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "Object");
        Err(())
    }
}

impl StringOrObject {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToObject(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<Heap<*mut JSObject>>>, ()> {
        Ok(Some(RootedTraceableBox::from_box(Heap::boxed(value.get().to_object()))))
    }
}


#[derive(JSTraceable)]
pub enum StringOrStringSequence {
    String(DOMString),
    StringSequence(Vec<DOMString>),
}

impl ToJSValConvertible for StringOrStringSequence {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrStringSequence::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrStringSequence::StringSequence(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for StringOrStringSequence {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match StringOrStringSequence::TryConvertToStringSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrStringSequence::StringSequence(value))),
                Ok(None) => (),
            }

        }

        match StringOrStringSequence::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrStringSequence::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "StringSequence");
        Err(())
    }
}

impl StringOrStringSequence {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToStringSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<DOMString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum StringOrURLOrBlob<TH: TypeHolderTrait + 'static> {
    String(DOMString),
    URL(DomRoot<URL<TH>>),
    Blob(DomRoot<Blob<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for StringOrURLOrBlob<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrURLOrBlob::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrURLOrBlob::URL(ref inner) => inner.to_jsval(cx, rval),
            StringOrURLOrBlob::Blob(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for StringOrURLOrBlob<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match StringOrURLOrBlob::<TH>::TryConvertToURL(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrURLOrBlob::URL(value))),
                Ok(None) => (),
            }
            match StringOrURLOrBlob::<TH>::TryConvertToBlob(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrURLOrBlob::Blob(value))),
                Ok(None) => (),
            }

        }

        match StringOrURLOrBlob::<TH>::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrURLOrBlob::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "URL, Blob");
        Err(())
    }
}

impl<TH: TypeHolderTrait> StringOrURLOrBlob<TH> {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToURL(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<URL<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToBlob(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<Blob<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum StringOrUnsignedLong {
    String(DOMString),
    UnsignedLong(u32),
}

impl ToJSValConvertible for StringOrUnsignedLong {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringOrUnsignedLong::String(ref inner) => inner.to_jsval(cx, rval),
            StringOrUnsignedLong::UnsignedLong(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for StringOrUnsignedLong {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_number() {
            match StringOrUnsignedLong::TryConvertToUnsignedLong(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrUnsignedLong::UnsignedLong(value))),
                Ok(None) => (),
            }

        }

        match StringOrUnsignedLong::TryConvertToString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringOrUnsignedLong::String(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "");
        Err(())
    }
}

impl StringOrUnsignedLong {
    unsafe fn TryConvertToString(cx: *mut JSContext, value: HandleValue) -> Result<Option<DOMString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToUnsignedLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<u32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum StringSequenceOrUnsignedLong {
    StringSequence(Vec<DOMString>),
    UnsignedLong(u32),
}

impl ToJSValConvertible for StringSequenceOrUnsignedLong {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            StringSequenceOrUnsignedLong::StringSequence(ref inner) => inner.to_jsval(cx, rval),
            StringSequenceOrUnsignedLong::UnsignedLong(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for StringSequenceOrUnsignedLong {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match StringSequenceOrUnsignedLong::TryConvertToStringSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(StringSequenceOrUnsignedLong::StringSequence(value))),
                Ok(None) => (),
            }

        }

        match StringSequenceOrUnsignedLong::TryConvertToUnsignedLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(StringSequenceOrUnsignedLong::UnsignedLong(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "StringSequence");
        Err(())
    }
}

impl StringSequenceOrUnsignedLong {
    unsafe fn TryConvertToStringSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<DOMString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, StringificationBehavior::Default) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToUnsignedLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<u32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord<TH: TypeHolderTrait + 'static> {
    TestBinding(DomRoot<TestBinding<TH>>),
    ByteStringSequenceSequence(Vec<Vec<ByteString>>),
    StringByteStringRecord(MozMap<ByteString>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::TestBinding(ref inner) => inner.to_jsval(cx, rval),
            TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::ByteStringSequenceSequence(ref inner) => inner.to_jsval(cx, rval),
            TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::StringByteStringRecord(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::<TH>::TryConvertToTestBinding(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::TestBinding(value))),
                Ok(None) => (),
            }

            match TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::<TH>::TryConvertToByteStringSequenceSequence(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::ByteStringSequenceSequence(value))),
                Ok(None) => (),
            }

            match TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::<TH>::TryConvertToStringByteStringRecord(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord::StringByteStringRecord(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "TestBinding, ByteStringSequenceSequence, StringByteStringRecord");
        Err(())
    }
}

impl<TH: TypeHolderTrait> TestBindingOrByteStringSequenceSequenceOrStringByteStringRecord<TH> {
    unsafe fn TryConvertToTestBinding(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<TestBinding<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToByteStringSequenceSequence(cx: *mut JSContext, value: HandleValue) -> Result<Option<Vec<Vec<ByteString>>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToStringByteStringRecord(cx: *mut JSContext, value: HandleValue) -> Result<Option<MozMap<ByteString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum TestBindingOrStringByteStringRecord<TH: TypeHolderTrait + 'static> {
    TestBinding(DomRoot<TestBinding<TH>>),
    StringByteStringRecord(MozMap<ByteString>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for TestBindingOrStringByteStringRecord<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            TestBindingOrStringByteStringRecord::TestBinding(ref inner) => inner.to_jsval(cx, rval),
            TestBindingOrStringByteStringRecord::StringByteStringRecord(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for TestBindingOrStringByteStringRecord<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match TestBindingOrStringByteStringRecord::<TH>::TryConvertToTestBinding(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(TestBindingOrStringByteStringRecord::TestBinding(value))),
                Ok(None) => (),
            }

            match TestBindingOrStringByteStringRecord::<TH>::TryConvertToStringByteStringRecord(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(TestBindingOrStringByteStringRecord::StringByteStringRecord(value))),
                Ok(None) => (),
            }

        }

        throw_not_in_union(cx, "TestBinding, StringByteStringRecord");
        Err(())
    }
}

impl<TH: TypeHolderTrait> TestBindingOrStringByteStringRecord<TH> {
    unsafe fn TryConvertToTestBinding(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<TestBinding<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }

    unsafe fn TryConvertToStringByteStringRecord(cx: *mut JSContext, value: HandleValue) -> Result<Option<MozMap<ByteString>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(value)) => value,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }
}


#[derive(JSTraceable)]
pub enum TestDictionaryOrLong<TH: TypeHolderTrait + 'static> {
    TestDictionary(RootedTraceableBox<TestDictionary<TH>>),
    Long(i32),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for TestDictionaryOrLong<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            TestDictionaryOrLong::TestDictionary(ref inner) => inner.to_jsval(cx, rval),
            TestDictionaryOrLong::Long(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for TestDictionaryOrLong<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        match TestDictionaryOrLong::<TH>::TryConvertToTestDictionary(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(TestDictionaryOrLong::TestDictionary(value))),
            Ok(None) => (),
        }


        match TestDictionaryOrLong::<TH>::TryConvertToLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(TestDictionaryOrLong::Long(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "TestDictionary");
        Err(())
    }
}

impl<TH: TypeHolderTrait> TestDictionaryOrLong<TH> {
    unsafe fn TryConvertToTestDictionary(cx: *mut JSContext, value: HandleValue) -> Result<Option<RootedTraceableBox<TestDictionary<TH>>>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(dictionary)) => dictionary,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<i32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}


#[derive(JSTraceable)]
pub enum USVStringOrURLSearchParams<TH: TypeHolderTrait + 'static> {
    USVString(USVString),
    URLSearchParams(DomRoot<URLSearchParams<TH>>),
}

impl<TH: TypeHolderTrait> ToJSValConvertible for USVStringOrURLSearchParams<TH> {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            USVStringOrURLSearchParams::USVString(ref inner) => inner.to_jsval(cx, rval),
            USVStringOrURLSearchParams::URLSearchParams(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl<TH: TypeHolderTrait> FromJSValConvertible for USVStringOrURLSearchParams<TH> {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_object() {
            match USVStringOrURLSearchParams::<TH>::TryConvertToURLSearchParams(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(USVStringOrURLSearchParams::URLSearchParams(value))),
                Ok(None) => (),
            }

        }

        match USVStringOrURLSearchParams::<TH>::TryConvertToUSVString(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(USVStringOrURLSearchParams::USVString(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "URLSearchParams");
        Err(())
    }
}

impl<TH: TypeHolderTrait> USVStringOrURLSearchParams<TH> {
    unsafe fn TryConvertToUSVString(cx: *mut JSContext, value: HandleValue) -> Result<Option<USVString>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(strval)) => strval,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); },
        }))
    }

    unsafe fn TryConvertToURLSearchParams(cx: *mut JSContext, value: HandleValue) -> Result<Option<DomRoot<URLSearchParams<TH>>>, ()> {
        Ok(Some(match root_from_handlevalue(value) {
            Ok(val) => val,
            Err(()) => {
                return Ok(None);
            }
        }
        ))
    }
}


#[derive(JSTraceable)]
pub enum UnsignedLongOrBoolean {
    UnsignedLong(u32),
    Boolean(bool),
}

impl ToJSValConvertible for UnsignedLongOrBoolean {
    unsafe fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {
        match *self {
            UnsignedLongOrBoolean::UnsignedLong(ref inner) => inner.to_jsval(cx, rval),
            UnsignedLongOrBoolean::Boolean(ref inner) => inner.to_jsval(cx, rval),
        }
    }
}

impl FromJSValConvertible for UnsignedLongOrBoolean {
    type Config = ();
    unsafe fn from_jsval(cx: *mut JSContext,
                         value: HandleValue,
                         _option: ())
                         -> Result<ConversionResult<Self>, ()> {
        if value.get().is_boolean() {
            match UnsignedLongOrBoolean::TryConvertToBoolean(cx, value) {
                Err(_) => return Err(()),
                Ok(Some(value)) => return Ok(ConversionResult::Success(UnsignedLongOrBoolean::Boolean(value))),
                Ok(None) => (),
            }

        }

        match UnsignedLongOrBoolean::TryConvertToUnsignedLong(cx, value) {
            Err(_) => return Err(()),
            Ok(Some(value)) => return Ok(ConversionResult::Success(UnsignedLongOrBoolean::UnsignedLong(value))),
            Ok(None) => (),
        }


        throw_not_in_union(cx, "");
        Err(())
    }
}

impl UnsignedLongOrBoolean {
    unsafe fn TryConvertToUnsignedLong(cx: *mut JSContext, value: HandleValue) -> Result<Option<u32>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ConversionBehavior::Default) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }

    unsafe fn TryConvertToBoolean(cx: *mut JSContext, value: HandleValue) -> Result<Option<bool>, ()> {
        Ok(Some(match FromJSValConvertible::from_jsval(cx, value, ()) {
            Ok(ConversionResult::Success(v)) => v,
            Ok(ConversionResult::Failure(error)) => {
                return Ok(None);
            }
            _ => { return Err(()); }
        }))
    }
}
